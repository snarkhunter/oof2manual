<!-- 
  This software was produced by NIST, an agency of the
  U.S. government, and by statute is not subject to copyright in the
  United States.  Recipients of this software assume all
  responsibilities associated with its operation, modification and
  maintenance. However, to facilitate maintenance we ask that before
  distributing modified versions of this software, you first contact
  the authors at oof_manager@ctcms.nist.gov.
-->

  <para>
    <classname>Rationalize</classname> fixes badly-shaped &elems; in a
    &skel; by either removing them or modifying them and their
    immediate neighbors.  Besides being ugly, badly shaped elements
    can impair the convergence and accuracy of the finite element
    method.
  </para>
  <para>
    &oof2; contains a number of different <xref
    linkend="RegisteredClass-Rationalizer"/> tools for rationalizing
    &skels;.  The <varname>method</varname> parameter determines
    whether the various tools will be applied <link
    linkend="RegisteredClass-AutomaticRationalization">automatically</link>
    or whether only a <link
    linkend="RegisteredClass-SpecificRationalization">specific</link>
    set of <link linkend="RegisteredClass-Rationalizer">tools</link>
    should be used.  Automatic rationalizing works better with a small
    set of target &elems;. Specific rationalizing works well with any
    number of &elems;.
  </para>

  <para>
    The <xref linkend="RegisteredClass-Rationalizer"/> tools are
    applied sequentially.  The general procedure for applying each
    tool is as follows:
    <orderedlist numeration="arabic">
      <listitem>
	<para>
	  Scan the current &skel; for <varname>target</varname>
	  elements according to the given <link
	  linkend="RegisteredClass-SkelModTargets"><varname>targets</varname>
	  parameter</link>.  The list of target &elems; is shuffled to
	  prevent artifacts from the original internal &elem;
	  ordering.
	</para>
      </listitem>
      <listitem id="Rationalize:apply">
	<para>
	  Apply the <xref linkend="RegisteredClass-Rationalizer"/> to
	  each &elem; in the target set.  When using <xref
	  linkend="RegisteredClass-SpecificRationalization"/>, only
	  the &elems; meeting the criteria specified in the <xref
	  linkend="RegisteredClass-Rationalizer"/><classname>'s</classname>
	  parameters are examined.  When using <xref
	  linkend="RegisteredClass-AutomaticRationalization"/>, all
	  &elems; are examined.  The <xref
	  linkend="RegisteredClass-Rationalizer"/> returns a list of
	  possible new &elem; configurations.
	</para>
      </listitem>
      <listitem id="Rationalize:replace">
	<para>
	  Apply the given <link
	  linkend="RegisteredClass-SkelModCriterion">acceptance
	  <varname>criterion</varname></link> to the new
	  configurations, and choose the best one, if any.
	</para>
      </listitem>
      <listitem>
	<para>
	  Any new &elems; created in step <xref
	  linkend="Rationalize:replace"/> are added to the target
	  list, but only if the <varname>criterion</varname> is not of
	  the <xref linkend="RegisteredClass-Unconditional"/>
	  variety.<footnote>
	    <para>
	      This is to avoid infinite loops.
	    </para>
	  </footnote>
	</para>
      </listitem>
      <listitem>
	<para>
	  Return to step <xref linkend="Rationalize:apply"/> until all
	  &elems; in the target list have been visited.
	</para>
      </listitem>
    </orderedlist>
  </para>

  <tip>
    <para>
      <link linkend="RegisteredClass-RemoveShortSide">Remove Short
      Sides</link> and <link linkend="RegisteredClass-QuadSplit">Split
      Wide Quads</link> inevitably create triangles and these
      triangles are not guaranteed to have good shapes. Thus, it's a
      good idea always to include <link
      linkend="RegisteredClass-RemoveBadTriangle">Remove Bad
      Triangles</link> in the set of tools to apply.  It will always
      be applied <emphasis>after</emphasis> the other
      <classname>Rationalizers</classname>.
    </para>
  </tip>
  <para>
    <xref linkend="Figure-before_rationalize"/> shows a &skel;
    featuring six badly-shaped &elems; &#x2014; two
    <emphasis>sharp</emphasis> triangles, a <emphasis>flat</emphasis>
    triangle, a quadrilateral with a <emphasis>wide</emphasis>
    interior angle, and two quadrilaterals sharing a
    <emphasis>short</emphasis> &sgmt;.
  </para>
  <figure id="Figure-before_rationalize">
    <title>Badly-shaped Elements</title>
    <mediaobject>
      <imageobject>
	<imagedata format="PNG"
	  fileref="FIGURES/ration/badelements.png"/>
      </imageobject>
      <imageobject>
	<imagedata format="EPS"
	  fileref="FIGURES/ration/badelements.eps"/>
      </imageobject>
      <caption>
	<para>
	  The &elems; that will be rationalized are highlighted in
	  red.
	</para>
      </caption>
    </mediaobject>
  </figure>
  <para>
    The rationalized &skel; is presented in <xref
    linkend="Figure-after_rationalize"/>.  The short-sided
    quadrilaterals have been replaced with triangles, the sharp
    triangles have been eliminated, the wide quadrilateral has been
    split into two triangles, and the flat triangle has merged with a
    neighboring triangle and morphed into three triangles.
  </para>    
  <figure id="Figure-after_rationalize">
    <title>After Rationalization</title>
    <mediaobject>
      <imageobject>
	<imagedata format="PNG"
	  fileref="FIGURES/ration/rationalized.png"/>
      </imageobject>
      <imageobject>
	<imagedata scale="50" format="EPS"
	  fileref="FIGURES/ration/rationalized.eps"/>
      </imageobject>
      <caption>
	<para>
	  The &elems; affected by the rationalization are highlighted
	  in red.
	</para>
      </caption>
    </mediaobject>
  </figure>

  <!-- Keep this comment at the end of the file
  Local variables:
  sgml-omittag:t
  sgml-shorttag:t 
  sgml-namecase-general:nil
  sgml-minimize-attributes:nil
  sgml-always-quote-attributes:t
  sgml-indent-step:2
  sgml-indent-data:t
  sgml-parent-document:("../../man_oof2.xml" "book" "chapter" "refentry" "refsect1")
  sgml-exposed-tags:nil
  sgml-local-ecat-files:nil
  End:
  -->
