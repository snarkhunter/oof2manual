<!--
  This software was produced by NIST, an agency of the
  U.S. government, and by statute is not subject to copyright in the
  United States.  Recipients of this software assume all
  responsibilities associated with its operation, modification and
  maintenance. However, to facilitate maintenance we ask that before
  distributing modified versions of this software, you first contact
  the authors at oof_manager@nist.gov.
-->

<refentry id="Class-PhysicalProperty">
  <refnamediv>
    <refname>PhysicalProperty</refname>
    <refpurpose>
      Intermediate base class for <xref linkend="Class-FluxProperty"/>
      and <xref linkend="Class-EqnProperty"/>
    </refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <title>Synopses</title>
    <para>
      Extension &Properties; derived from <classname><xref
      linkend="Class-FluxProperty"/></classname> or <classname><xref
      linkend="Class-EqnProperty"/></classname> must redefine <link
      linkend="Class-PhysicalProperty-integration_order"><function>integration_order()</function></link>,
      in either C++ or Python.  This is the only method in the
      &Property; class hierarchy that <emphasis>must</emphasis> be
      redefined in subclasses.
    </para>
    <refsect2>
      <title>C++ Synopsis</title>
      <programlisting>
#include "engine/property.h"</programlisting>

      <classsynopsis language="cpp">
        <ooclass>
          <classname>PhysicalProperty</classname>
        </ooclass>
        <ooclass>
          <modifier>public</modifier>
          <classname><xref linkend="Class-Property"/></classname>
        </ooclass>
        <methodsynopsis>
          <modifier>virtual</modifier>
          <type>int</type>
          <methodname><link linkend="Class-PhysicalProperty-integration_order">integration_order</link></methodname>
          <methodparam>
            <modifier>const</modifier>
            <type>CSubProblem*</type>
            <parameter>subproblem</parameter>
          </methodparam>
          <methodparam>
            <modifier>const</modifier>
            <type>Element*</type>
            <parameter>element</parameter>
          </methodparam>
          <modifier>const</modifier>
        </methodsynopsis>
      </classsynopsis>

      <refsect3 id="Class-PhysicalProperty-subclasses">
        <title>C++ Derived Classes</title>
        <itemizedlist spacing="compact">
          <listitem>
            <simpara>
              <classname><xref linkend="Class-FluxProperty"/></classname>
            </simpara>
          </listitem>
          <listitem>
            <simpara>
              <classname><xref linkend="Class-EqnProperty"/></classname>
            </simpara>
          </listitem>
        </itemizedlist>
      </refsect3>               <!-- Derived classes -->
      <refsect3>
        <title>C++ Source Files</title>
        <itemizedlist spacing="compact">
          <listitem>
            <simpara>
              <filename>SRC/engine/property.h</filename>: C++ header
            </simpara>
          </listitem>
          <listitem>
            <simpara>
              <filename>SRC/engine/property.swg</filename>: SWIG source
              code
            </simpara>
          </listitem>
        </itemizedlist>
      </refsect3>               <!-- C++ Source files -->
    </refsect2>                 <!-- C++ Synopsis-->
    
    <refsect2>
      <title>Python Synopsis</title>
      <para>
        The Python classes <classname><xref
        linkend="Class-PyFluxProperty"/></classname> and
        <classname><xref linkend="Class-PyEqnProperty"/></classname>
        are derived from a C++ base class,
        <classname>PyPhysicalPropertyMethods</classname>.
        <classname>PyPhysicalPropertyMethods</classname> defines only
        one function, <methodname>integration_order()</methodname>,
        that can be redefined in a Python
        subclass.<footnote><simpara>As with <link
        linkend="Class-PyPropertyMethods"><classname>PyPropertyMethods</classname></link>,
        there is no actual Python version of this class.  But a class
        derived from <classname><xref
        linkend="Class-PyFluxProperty"/></classname> or
        <classname><xref linkend="Class-PyEqnProperty"/></classname>
        will act as if it's derived from
        <classname>PyPhysicalPropertyMethods</classname> in some
        ways.</simpara></footnote>
      </para>
      <programlisting>
from ooflib.SWIG.engine import pypropertywrapper </programlisting>
      <classsynopsis language="python">      
        <ooclass>
          <classname>PyPhysicalPropertyMethods</classname>
        </ooclass>
        <methodsynopsis>
          <methodname><link linkend="Class-PhysicalProperty-integration_order">integration_order</link></methodname>
          <methodparam>
            <parameter>subproblem</parameter>
          </methodparam>
          <methodparam>
            <parameter>element</parameter>
          </methodparam>
        </methodsynopsis>
      </classsynopsis>
      <refsect3>
        <title>Python Derived Classes</title>
        <itemizedlist spacing="compact">
          <listitem>
            <simpara>
              <classname><xref linkend="Class-PyFluxProperty"/></classname>
            </simpara>
          </listitem>
          <listitem>
            <simpara>
              <classname><xref linkend="Class-PyEqnProperty"/></classname>
            </simpara>
          </listitem>
        </itemizedlist>
      </refsect3>                 <!-- Derived classes -->
      <refsect3>
        <title>Source Files</title>
        <itemizedlist spacing="compact">
          <listitem>
            <simpara>
              <filename>SRC/engine/pypropertywrapper.C</filename>: C++
              code
            </simpara>
          </listitem>
          <listitem>
            <simpara>
              <filename>SRC/engine/pypropertywrapper.h</filename>: C++
              header
            </simpara>
          </listitem>
        </itemizedlist>
      </refsect3>               <!-- Python source files -->

    </refsect2>                 <!-- Python Synopsis -->
  </refsynopsisdiv>
  
  <refsection>
    <title>Overview</title>
    <para>
      <classname>PhysicalProperty</classname> is a subclass of
      &Property; and a base class of <link
      linkend="Class-FluxProperty"><classname>FluxProperty</classname></link>
      and <link
      linkend="Class-EqnProperty"><classname>EqnProperty</classname></link>,
      the classes that define the physics behavior of materials.
      Users should not derive new classes from
      <classname>PhysicalProperty</classname> directly.
    </para>
  </refsection>                 <!-- Overview -->
  <refsection>
    <title>Methods</title>
    <refsection id="Class-PhysicalProperty-integration_order">
	  <title>
        <code>int integration_order(const CSubProblem *subproblem, const Element
	    *element) const</code>
      </title>
      <para>
        When &oof2; converts an equation like <xref
        linkend="Eqn-Divergence"/> or <xref
        linkend="Eqn-TimeDivergence"/> to matrix form, it replaces the
        &fields; by an expansion in the &elem;'s <link
        linkend="Section-Concepts-Mesh-Geometry">shape
        functions</link>
        <inlineequation>
          <alt role="tex">
            \(N_i({\bf x})\)
          </alt>
        </inlineequation>,
        multiplies everything by a test function (which is another
        shape function,
        <inlineequation>
          <alt role="tex">
            \(N_j({\bf x})\)
          </alt>
          </inlineequation>),

        and then integrates over the entire mesh
        (<foreignphrase>i.e,</foreignphrase> over each element).
        Divergence terms are integrated by parts, which replaces the
        test function by its derivative.
      </para>
      <para>
        The integration over the elements is done by <ulink
        url="https://en.wikipedia.org/wiki/Gaussian_quadrature"
        role="external">Gaussian quadrature</ulink>.  To choose the
        appropriate number of Gauss points, it's necessary to know the
        polynomial degree of the integrand in <emphasis>x</emphasis>
        and <emphasis>y</emphasis>.
        Generally, higher order polynomials require more points.
        Choosing an integration order that is too large will slow down
        the calculation.  Choosing one that is too small could lead to
        incorrect results.
      </para>
      <para>
        The method <function>integration_order()</function>, which
        must be defined in each
        <classname>PhysicalProperty</classname> class, returns the
        polynomial degree of the integrand.  The degree depends on the
        structure of the integrand and on the polynomial degrees of
        the shape functions and their derivatives.  These can be
        obtained from <link
        linkend="Class-Element-shapefun_degree"><function>Element::shapefun_degree()</function></link>
        and <link
        linkend="Class-Element-dshapefun_degree"><function>Element::dshapefun_degree()</function></link>.
      </para>
      <para>
        For example, a <classname>Property</classname> that adds a
        constant to the force term in <xref linkend="Eqn-Divergence"/>
        or <xref linkend="Eqn-TimeDivergence"/> will have all of its
        space dependence in the test function, so it should define
        <function>integration_order()</function> like this:
        <programlisting>
int ForceDensity::integration_order(const CSubProblem*, const Element* el) const
{
  return el-><emphasis role="bold">shapefun_degree</emphasis>();
} </programlisting>
        A constant term added to the flux in either equation will be
        integrated by parts, moving a derivative operation from the
        divergence to the test function. Thus the degree of the
        integrand is the degree of the derivative of the shape
        function:
        <programlisting>
int StressFreeStrain::integration_order(const CSubProblem*, const Element* el) const
{
  return el-><emphasis role="bold">dshapefun_degree</emphasis>();
} </programlisting>
      </para>
      <para>
        A &Property; that contributes to the &Mmatrix; or &Cmatrix;
        terms in <xref linkend="Eqn-TimeDivergence"/> will have
        spatial dependence from both the test function and the
        expansion of the &field;, yielding the product of two shape
        functions, so the total polynomial degree is twice the shape
        function degree:
        <programlisting>
int MassDensityProp::integration_order(const CSubProblem*, const Element* el) const {
   // <lineannotation>The degree of a product is the sum of the degrees of the factors.</lineannotation>
  return <emphasis role="bold">2</emphasis> * el-><emphasis role="bold">shapefun_degree</emphasis>();
} </programlisting>
      </para>

      <para>
        Sometimes the polynomial degree depends on whether or not a
        &field; has an <link
        linkend="Section-Concepts-Mesh-3D">out-of-plane</link> part.
        Consider <link
        linkend="Property-Mechanical-Elasticity-Isotropic">elasticity</link>
        or <link
        linkend="Property-Thermal-Conductivity-Isotropic">thermal
        conductivity</link>.  The &flux; is proportional to the
        gradient of a &field;, and the &field; &varphi; can be
        expanded in shape functions.
        Schematically<footnote><simpara>The index
        <emphasis>i</emphasis> stands for a combination of node
        indices and field component indices.  This is just a schematic
        representation.</simpara></footnote>

        <equation>
          <alt role="tex">
            \[
            \sigma({\bf x}) = \mathrm{modulus}\cdot\sum_i
            {\partial\over\partial\bf x} N_i({\bf x})\varphi({\bf x}_i)
            \]
          </alt>
        </equation>

        where

        <inlineequation>
          <alt role="tex">
            \({\bf x}_i\)
          </alt>
        </inlineequation>

        is the position of &node; <emphasis>i</emphasis>, and

        <inlineequation>
          <alt role='tex'>
            \(\varphi({\bf x}_i)\)
          </alt>
        </inlineequation>
        
        the &field; at &node; <emphasis>i</emphasis>, is a constant.
        Taking the divergence, multiplying by a test function
        <inlineequation>
          <alt role="tex">
            \(N_j\)
          </alt>
        </inlineequation>

        and integrating (by parts) over the area yields

        <equation>
          <alt role="tex">
            \[
            \int d{\bf x}\, N_j({\bf x}) \nabla\cdot\sigma({\bf x}) =
            - \mathrm{modulus}\cdot
            \sum_i \int d{\bf x}\,
            {\partial N_j({\bf x})\over\partial{\bf x}}\,
            {\partial N_i({\bf x})\over\partial{\bf x}} \varphi({\bf x}_i)
            + \mathrm{boundary\ terms}
            \]
          </alt>
        </equation>
        
        The only position dependence comes from the shape functions,
        so the polynomial degree is twice the the degree of the shape
        function derivatives, <code>2*el->dshapefun_degree()</code>.
      </para>
      <para>
        However, this isn't quite correct.  If the &field; has an <link
        linkend="Section-Concepts-Mesh-3D">out-of-plane</link> part,
        
        <equation>
          <alt role="tex">
            \[
            \psi({\bf x}) \equiv (\partial\varphi_x/\partial z,\,
                                  \partial\varphi_y/\partial z,\,
                                  \partial\varphi_z/\partial z)
            \]
          </alt>
        </equation>
        
        those components also contribute to the flux.  Expanding the
        out-of-plane &field; in shape functions,

        <equation>
          <alt role="tex">
            \[
            \psi({\bf x}) = \sum_i N_i({\bf x}) \psi({\bf x}_i)
            \]
          </alt>
        </equation>

        the &flux; becomes

        <equation id="Eqn-oopflux">
          <alt role="tex">
            \[
            \sigma({\bf x}) = \mathrm{modulus}\cdot \sum_i
            \left(
            {\partial N_i({\bf x})\over\partial x}\varphi_x({\bf x}_i) +
            {\partial N_i({\bf y})\over\partial y}\varphi_y({\bf x}_i) +
            N_i({\bf x})\psi_z({\bf x}_i)
            \right)
            \]
          </alt>
        </equation>

        Taking the divergence and integrating by parts, the last term
        in <xref linkend="Eqn-oopflux"/> will have one factor of

        <inlineequation>
          <alt role="tex">
            \(\partial N({\bf x})/\partial{\bf x}\)
          </alt>
        </inlineequation>

        from the divergence and one factor of

        <inlineequation>
          <alt role="tex">
            \(N({\bf x})\)
          </alt>
        </inlineequation>

        from the flux.

        <inlineequation>
          <alt role="tex">
            \(N({\bf x})\)
          </alt>
        </inlineequation>

        is a higher order polynomial than

        <inlineequation>
          <alt role="tex">
            \(\partial N({\bf x})/\partial{\bf x}\)
          </alt>
        </inlineequation>

        so the degree is higher when the
        &field; is out of plane.
        <function>integration_order()</function> should be
        
        <programlisting>
int Elasticity::integration_order(const CSubProblem *subp, const Element *el) const
{
  if(displacement->in_plane(subp))
    // <lineannotation>in-plane: two derivatives of N(x)</lineannotation>
    return 2*el->dshapefun_degree();
  // <lineannotation>out-of-plane: one N(x) and one derivative of N(x)</lineannotation>  
  return el->shapefun_degree() + el->dshapefun_degree();
} </programlisting>
      </para>
      
	  <warning>
	    <para>
	      Do <emphasis>not</emphasis> compute the shapefunction's
	      derivative's degree by subtracting 1 from the
	      shapefunction's degree.  For purposes of Gaussian
	      integration, the degree of the shapefunction is sometimes
	      less than its actual polynomial degree.  For example, the
	      linear quadrilateral shapefunction
          <inlineequation>
            <alt role="tex">
              \((1-x)(1-y)/4\)
            </alt>
          </inlineequation>
	      can be integrated exactly with a single Gauss point at
	      (0,0), although its polynomial degree is 2.  For this
	      function, both <function>shapefun_degree()</function> and
	      <function>dshapefun_degree()</function> return 1.
	  </para>
	</warning>
  </refsection>                 <!-- integration_order -->
  
    
  </refsection>                 <!-- Methods -->
</refentry>

<!-- Keep this comment at the end of the file
  Local variables:
  sgml-omittag:t
  sgml-shorttag:t 
  sgml-namecase-general:nil
  sgml-minimize-attributes:nil
  sgml-always-quote-attributes:t
  sgml-indent-step:2
  sgml-indent-data:t
  sgml-parent-document:("man_oof2.xml" "reference")
  sgml-exposed-tags:nil
  sgml-local-ecat-files:nil
  End:
-->
