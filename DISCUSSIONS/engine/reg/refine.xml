<!-- 
  This software was produced by NIST, an agency of the
  U.S. government, and by statute is not subject to copyright in the
  United States.  Recipients of this software assume all
  responsibilities associated with its operation, modification and
  maintenance. However, to facilitate maintenance we ask that before
  distributing modified versions of this software, you first contact
  the authors at oof_manager@nist.gov.
-->


<para>
  <classname>Refine</classname> is a <xref
  linkend="RegisteredClass-SkeletonModifier"/> that chops its target
  elements and their neighbors into smaller pieces.  This adds more
  degrees of freedom to the &skel;, which allows it to adapt better
  to the &micro;.  Refinement by itself is rarely sufficient to
  create an acceptable &skel; &#x2014; it must be combined with other
  <link linkend="MenuItem-OOF.Skeleton.Modify">modifiers</link> that
  move nodes, such as <xref linkend="RegisteredClass-SnapNodes"/> or
  <xref linkend="RegisteredClass-Anneal"/>.
</para>

<para>
  The steps involved in refining a &skel; are:
  <orderedlist numeration="arabic">
    <listitem>
	  <para>
	    Find the element <emphasis>edges</emphasis> (&sgmts;) that
	    need to be refined. These are specified by the
	    <varname>targets</varname> parameter, whose value is a <xref
	    linkend="RegisteredClass-RefinementTarget"/> object.
	    Different kinds of <xref
	    linkend="RegisteredClass-RefinementTarget"/> objects pick
	    segments in different ways, for example, by choosing all edges
	    of heterogeneous elements or the long edges of skinny
	    elements.  See <xref
	    linkend="RegisteredClass-RefinementTarget"/> for the details.
	  </para>
	  <para>
	    <xref linkend='Figure-refine'/> (a) shows a &skel; that needs to
	    have its heterogeneous elements refined.  Setting
	    <varname>targets</varname> to <userinput><xref
	    linkend="RegisteredClass-CheckHomogeneity"/></userinput> marks
	    the edges of all elements whose homogeneity is less than 90%,
	    as shown in <xref linkend="Figure-refine"/> (b).
	  </para>
    </listitem>
    <listitem>
      <para>
        The <varname>divider</varname> parameter determines how and
        where the chosen segments will be divided.  Segments are
        marked for division in in half (<xref
        linkend="RegisteredClass-Bisection"/>), in thirds
        (<xref linkend="RegisteredClass-Trisection"/>), or at
        <xref linkend="RegisteredClass-TransitionPoints"/>.
      </para>
    </listitem>
    <listitem>
	  <para>
	    After the segments are marked for division, each element is
	    replaced by a suitable collection of smaller elements, such
	    that each marked segment of the old &skel; turns into a set
	    number of segments of the new &skel;.  Exactly how this is
	    done depends on the setting of the <varname>rules</varname>
	    parameter.  (For details, see the description of <xref
	    linkend="Enum-RuleSet"/>.)  The rules sometimes
	    allow more than one way of subdividing an element. In those
	    cases, the total <link
	    linkend="Section-Concepts-Skeleton-Energy">effective
	    energy</link> of the new elements is computed, and the
	    configuration with the lowest energy is used.  The parameter
	    <varname>alpha</varname> determines the relative contributions
	    of shape and homogeneity to the effective energy, as discussed
	    in <xref linkend="Section-Concepts-Skeleton-Energy"/>.
	  </para>
	  <para>
	    <xref linkend="Figure-refine"/> shows the result of
	    refining a mesh using
	    <varname>divider</varname>=<userinput><link
	    linkend="RegisteredClass-Bisection">Bisection</link></userinput>
	    with <varname>alpha</varname>=<userinput>0.3</userinput>.
	  </para>
    </listitem>
  </orderedlist>

  <figure id="Figure-refine">
    <title>Refining a Skeleton</title>
    <mediaobject id="Figure-refine0">
	  <imageobject>
	    <imagedata fileref="FIGURES/refinement/refine.png"
                   contentwidth="988px" format="PNG"/>
	  </imageobject>
	  <caption>
	    <simpara>
	      (a) A &skel; ripe for refinement.
        </simpara>
        <simpara>
          (b) The <userinput><link
	      linkend="RegisteredClass-CheckHomogeneity">CheckHomogeneity</link>(threshold=0.9)</userinput>
	      <xref linkend="RegisteredClass-RefinementTarget"/>
	      operator marks the &sgmts; of the heterogeneous &elems;.
	      The marked &sgmts; are drawn in green and the inhomogeneous
	      &elems; are red.<footnote><simpara> In actual &oof2;
	      operation, the marked &sgmts; and &elems; are not
	      shown.</simpara></footnote>
        </simpara>
        <simpara>
          (c) The result of refining the marked edges with
          <varname>divider</varname> set to <userinput><link
          linkend="RegisteredClass-Bisection">Bisection</link></userinput>
          and <varname>rules</varname> set to <userinput><link
          linkend="Enum-RuleSet">Quick</link></userinput>.
	      </simpara>
	  </caption>
    </mediaobject>
  </figure>
</para>

<caution>
  <anchor id="over-refinement"/>
  <para>
    One should not abuse Refinement to the point where &elems; become
    too small.  <xref linkend="Figure-abused"/> shows a part of &skel;
    that has been refined to the pixel resolution &#x2014; many
    elements along the boundary represent a single pixel. This is not
    only unphysical (the jagged pixel boundaries are an artifact of
    the digitization of the micrograph) but can introduce unnecessary
    numerical anomalies, such as stress concentrations, at corner
    nodes.<footnote><para>Of course, if you know that the pixels in an image
    <emphasis>do</emphasis> represent physical features, you should
    refine the &skel; until they are resolved.</para></footnote>
  </para>
  <para>
    Instead of abusing refinement, it is better to employ other
    modification strategies.  The right half of <xref
    linkend="Figure-abused"/> shows the same portion of the &skel; on
    the left, but with different modification tools applied.  This
    &skel; has been refined less, but the elements have been adapted
    to the &micro; by using <xref
    linkend="RegisteredClass-TransitionPoints"/> instead of <xref
    linkend="RegisteredClass-Bisection"/>, and by using the
    <varname>minlength</varname> parameter of <xref
    linkend="RegisteredClass-SegmentDivider"/> to prevent the creation
    of small &elems;.
    <figure id="Figure-abused">
	  <title>Excessive and Appropriate Refinement</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="FIGURES/refinement/refinedpixels.png"
                     format="PNG" contentwidth="681px"/>
	    </imageobject>
	    <caption>
	      <simpara>
            (a) A portion of an over-refined &skel;.  It is probably
            resolving unphysical details of the image.
          </simpara>
          <simpara>
            (b) A properly refined &skel; on the same region.  The
            &elem; edges smooth over the jagged pixel boundary.
	      </simpara>
	    </caption>
	  </mediaobject>
    </figure>
  </para>
</caution>

  <!-- Keep this comment at the end of the file
  Local variables:
  sgml-omittag:t
  sgml-shorttag:t 
  sgml-namecase-general:nil
  sgml-minimize-attributes:nil
  sgml-always-quote-attributes:t
  sgml-indent-step:2
  sgml-indent-data:t
  sgml-parent-document:("../../../man_oof2.xml" "book" "chapter" "refentry" "refsect1")
  sgml-exposed-tags:nil
  sgml-local-ecat-files:nil
  End:
  -->
