<!-- 
  This software was produced by NIST, an agency of the
  U.S. government, and by statute is not subject to copyright in the
  United States.  Recipients of this software assume all
  responsibilities associated with its operation, modification and
  maintenance. However, to facilitate maintenance we ask that before
  distributing modified versions of this software, you first contact
  the authors at oof_manager@nist.gov.
-->

<refentry id="Function-getField">
  <refnamediv>
    <refname>getField</refname>
    <refpurpose>Retrieve a <classname>Field</classname> object by
    name</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <title>Synopses</title>
    <refsect2>
      <title>C++</title>
      <literallayout class="monospaced">
#include "engine/field.h"
static Field *Field::getField(const std::string &amp;name);</literallayout>
    </refsect2>
    
    <refsect2>
      <title>Python</title>
      <literallayout class="monospaced">
from ooflib.SWIG.engine import field
f = field.getField(name) </literallayout>
    </refsect2>
    <refsect2>
      <title>Source Files</title>
      <itemizedlist spacing="compact">
        <listitem>
          <simpara>
            <filename>SRC/engine/field.h</filename>: C++ headers
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            <filename>SRC/engine/field.C</filename>: C++ code
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            <filename>SRC/engine/field.swg</filename>: SWIG source code
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            <filename>SRC/engine/field.spy</filename>: Python code
            included in <filename>field.swg</filename>.
          </simpara>
        </listitem>
      </itemizedlist>
    </refsect2>
  </refsynopsisdiv>
  <refsection>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><varname>name</varname></term>
        <listitem>
          <para>
            The name of an existing &Field;.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>
  <refsection>
    <title>Discussion</title>
    <para>
      <function>getField</function> returns a previously created
      &Field; object.  In C++ it returns a pointer to the base class,
      which may be cast to the derived class:
      <programlisting>
ScalarField *T = dynamic_cast&lt;ScalarField*&gt;(getField("Temperature")); </programlisting>
      In Python, it returns a reference to an object
      of the appropriate derived class:
      <programlisting>
>>> T = getField("Temperature")
>>> type(T)
&lt;class 'ooflib.SWIG.engine.field.ScalarField'&gt; </programlisting>

      <function>getFlux</function> is defined in the main &oof2;
      namespace so that it can be used freely in <link
      linkend="MenuItem-OOF.File.Load.Script">scripts</link>, <link
      linkend="Section-ScriptGUI">text mode</link> and the <link
      linkend="Section-Windows-Console">Console Window</link>.

    </para>
  </refsection>
</refentry>

<!-- ============================================================= -->

<refentry id="Function-getFlux">
  <refnamediv>
    <refname>getFlux</refname>
    <refpurpose>Retrieve a <classname>Flux</classname> object by
    name</refpurpose> 
  </refnamediv>
  <refsynopsisdiv>
    <title>Synopses</title>
    <refsect2>
      <title>C++ Synopsis</title>
      <literallayout class="monospaced">
#include "engine/flux.h"
static Flux *Flux::getFlux(const std::string&amp; name); </literallayout>
    </refsect2>
    <refsect2>
      <title>Python Synopsis</title>
      <literallayout class="monospaced">
from ooflib.SWIG.engine import flux
f = flux.getFlux(name) </literallayout>
    </refsect2>
    <refsect2>
      <title>Source Files</title>
      <itemizedlist spacing="compact">
        <listitem>
          <simpara>
            <filename>SRC/engine/flux.h</filename>: C++ headers
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            <filename>SRC/engine/flux.C</filename>: C++ code
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            <filename>SRC/engine/flux.spy</filename>: Python code
            included in <filename>flux.swg</filename>
          </simpara>
        </listitem>
      </itemizedlist>
    </refsect2>
  </refsynopsisdiv>
  <refsection>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><varname>name</varname></term>
        <listitem>
          <para>
            The name of an existing &Flux;.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>
  <refsection>
    <title>Description</title>
    <para>
      <function>getFlux</function> returns a previously created
      &Flux; object.  In C++ it returns a pointer to the base class,
      which may be cast to the derived class:
      <programlisting>
VectorFlux *hf = dynamic_cast&lt;VectorFlux*&gt;(getField("Heat_Flux")); </programlisting>
      In Python, it returns a reference to an object
      of the appropriate derived class:
      <programlisting>
>>> hf = getFlux("Heat_Flux")
>>> type(hf)
&lt;class 'ooflib.SWIG.engine.flux.VectorFlux'&gt; </programlisting>

      <function>getFlux</function> is defined in the main &oof2;
      namespace so that it can be used freely in <link
      linkend="MenuItem-OOF.File.Load.Script">scripts</link>, <link
      linkend="Section-ScriptGUI">text mode</link> and the <link
      linkend="Section-Windows-Console">Console Window</link>.
    </para>
  </refsection>
</refentry>

<!-- ================================================================ -->

<refentry id="Function-getEquation">
  <refnamediv>
    <refname>getEquation</refname>
    <refpurpose>Retrieve a <classname>Equation</classname> object by
    name</refpurpose> 
  </refnamediv>
  <refsynopsisdiv>
    <title>Synopses</title>
    <refsect2>
      <title>C++ Synopsis</title>
      <literallayout class="monospaced">
#include "engine/equation.h"
static Equation* Equation::getEquation(const std::string&amp; name); </literallayout>
    </refsect2>
    <refsect2>
      <title>Python Synopsis</title>
      <literallayout class="monospaced">
from ooflib.SWIG.engine import equation
eq = equation.getEquation(name) </literallayout>
    </refsect2>
    <refsect2>
      <title>Source Files</title>
      <itemizedlist spacing="compact">
        <listitem>
          <simpara>
            <filename>SRC/engine/equation.h</filename>: C++ headers
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            <filename>SRC/engine/equation.C</filename>: C++ code
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            <filename>SRC/engine/equation.spy</filename>: Python code
            included in <filename>equation.swg</filename>
          </simpara>
        </listitem>
      </itemizedlist>
    </refsect2>
  </refsynopsisdiv>
  <refsection>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><varname>name</varname></term>
        <listitem>
          <para>
            The name of an existing &Equation;.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>
  <refsection>
    <title>Description</title>
    <para>
      <function>getEquation</function> returns a previously created
      &Equation; object.  In C++ it returns a pointer to the base class,
      which may be cast to the derived class:
      <programlisting>
DivergenceEquation *eq = dynamic_cast&lt;DivergenceEquation*&gt;(getEquation("Force_Balance")); </programlisting>
      In Python, it returns a reference to an object
      of the appropriate derived class:
      <programlisting>
>>> eq = getEquation("Force_Balace")
>>> type(eq)
&lt;class 'ooflib.SWIG.engine.equation.DivergenceEquation&gt; </programlisting>

      <function>getEquation</function> is defined in the main &oof2;
      namespace so that it can be used freely in <link
      linkend="MenuItem-OOF.File.Load.Script">scripts</link>, <link
      linkend="Section-ScriptGUI">text mode</link> and the <link
      linkend="Section-Windows-Console">Console Window</link>.
    </para>
  </refsection>
</refentry>

<!-- Keep this comment at the end of the file
  Local variables:
  sgml-omittag:t
  sgml-shorttag:t 
  sgml-namecase-general:nil
  sgml-minimize-attributes:nil
  sgml-always-quote-attributes:t
  sgml-indent-step:2
  sgml-indent-data:t
  sgml-parent-document:("../man_oof2.xml" "book" "chapter")
  sgml-exposed-tags:nil
  sgml-local-ecat-files:nil
  End:
-->
