<!-- 
  This software was produced by NIST, an agency of the
  U.S. government, and by statute is not subject to copyright in the
  United States.  Recipients of this software assume all
  responsibilities associated with its operation, modification and
  maintenance. However, to facilitate maintenance we ask that before
  distributing modified versions of this software, you first contact
  the authors at oof_manager@nist.gov.
-->

<!-- TODO: Delete Function-acquirePylock and replace with a page for
     Python_Thread_Allow, Python_Thread_Block, and their macros.

     TODO:  Move conjugatePair, SmallSystem, CSubProblem, and
     MasterPosition to the Mesh Classes and Functions section.
-->

<reference>
  <title>Miscellaneous Classes and Functions</title>
  
<refentry id="Class-Parameter">
    <refnamediv>
      <refname>Parameter</refname>
      <refpurpose>Parameter classes for &oof2; menu commands,
	Properties, Outputs,
	and RegisteredClasses.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <refsect2>
	<title>Basic Parameters</title>
	<programlisting>
from oof2.common.IO.parameter import *

<link linkend="Class-BooleanParameter">BooleanParameter</link>(name, value, default=0, tip=None)

<link linkend="Class-StringParameter">StringParameter</link>(name, value=None, default="", tip=None)

<link linkend="Class-FloatParameter">FloatParameter</link>(name, value=None, default=0.0, tip=None)

<link linkend="Class-IntParameter">IntParameter</link>(name, value=None, default=0, tip=None)

from oof2.common.enum import EnumParameter

<link linkend="Class-EnumParameter">EnumParameter</link>(name, enumclass, value=None, default=None, tip=None)

</programlisting>
      </refsect2><!-- Basic Parameters -->
      <refsect2>
	<title>Range Parameters</title>
	<programlisting>
from oof2.common.IO.parameter import *

<link linkend="Class-IntRangeParameter">IntRangeParameter</link>(name, range, value=None, default=None, tip=None)

<link linkend="Class-FloatRangeParameter">FloatRangeParameter</link>(name, range, value=None, default=None, tip=None)

	</programlisting>
      </refsect2><!-- Range Parameters -->
      <refsect2>
	<title>RegisteredClass Parameters</title>
	<programlisting>
from oof2.common.IO.parameter import *

<link linkend="Class-RegisteredParameter">RegisteredParameter</link>(name, reg, value=None, default=None, tip=None)

<link linkend="Class-ConvertibleRegisteredParameter">ConvertibleRegisteredParameter</link>(name, reg, value=None, default=None, tip=None)

<link linkend="Class-RegisteredListParameter">RegisteredListParameter</link>(name, reg, value=None, default=[], tip=None)
	</programlisting>
      </refsect2>
      <refsect2>
	<title>Automatic Parameters</title>
	<programlisting>
from oof2.common.IO.parameter import *

<link linkend="Class-AutoNumericParameter">AutoNumericParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-AutoIntParameter">AutoIntParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-AutomaticNameParameter">AutomaticNameParameter</link>(name, resolver, value=None, default=None, tip=None)

	</programlisting>
      </refsect2><!-- Automatic Parameters -->
      <refsect2>
	<title>Who Parameters</title>
	<programlisting>
from oof2.common.IO.whoville import *

<link linkend="Class-WhoParameter">WhoParameter</link>(name, whoclass, value=None, default=None, tip=None)

<link linkend="Class-AnyWhoParameter">AnyWhoParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-NewWhoParameter">NewWhoParameter</link>(name, whoclass, value=None, default=None, tip=None)

<link linkend="Class-WhoClassParameter">WhoClassParameter</link>(name, value=None, default=None, condition=noSecretClasses, tip=None) </programlisting>
      </refsect2><!-- Who Parameters -->
      <refsect2>
	<title>Mesh Object Parameters</title>
	<programlisting>
from oof2.engine.IO.meshparameters import *

<link linkend="Class-FieldParameter">FieldParameter</link>(name,
	  value=None, default=None, tip=None, outofplane=0)

<link linkend="Class-FluxParameter">FluxParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-EquationParameter">EquationParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-FieldIndexParameter">FieldIndexParameter</link>(name, value=None, default=None, tip=None) </programlisting>
      </refsect2><!-- Mesh Object Parameters -->
      <refsect2>
	<title>Rank 4 Tensor Parameters</title>
	<programlisting>
from oof2.engine.IO.isocijkl import IsotropicCijklParameter

<link linkend="Class-CijklParameter">IsotropicCijklParameter</link>(name, value=None, default=None, tip=None) 

from oof2.engine.IO.anisocijkl import *

<link linkend="Class-CijklParameter">CubicCijklParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-CijklParameter">HexagonalCijklParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-CijklParameter">TetragonalCijklParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-CijklParameter">TrigonalACijklParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-CijklParameter">TrigonalBCijklParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-CijklParameter">OrthorhombicCijklParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-CijklParameter">MonoclinicCijklParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-CijklParameter">TriclinicCijklParameter</link>(name, value=None, default=None, tip=None) </programlisting>
      </refsect2><!-- Rank 4 Tensor Parameters -->
      <refsect2>
	<title>Rank 3 Tensor Parameters</title>
	<programlisting>
from oof2.SWIG.engine.rank3tensor import *

<link linkend="Class-Rank3TensorParameter">C1Rank3TensorParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-Rank3TensorParameter">C2Rank3TensorParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-Rank3TensorParameter">CsRank3TensorParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-Rank3TensorParameter">D2Rank3TensorParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-Rank3TensorParameter">C2vRank3TensorParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-Rank3TensorParameter">C4Rank3TensorParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-Rank3TensorParameter">C4iRank3TensorParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-Rank3TensorParameter">D4Rank3TensorParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-Rank3TensorParameter">C4vRank3TensorParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-Rank3TensorParameter">D2dRank3TensorParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-Rank3TensorParameter">C3Rank3TensorParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-Rank3TensorParameter">D3Rank3TensorParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-Rank3TensorParameter">C3vRank3TensorParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-Rank3TensorParameter">C6Rank3TensorParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-Rank3TensorParameter">D6iRank3TensorParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-Rank3TensorParameter">D6Rank3TensorParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-Rank3TensorParameter">C6vRank3TensorParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-Rank3TensorParameter">D3hRank3TensorParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-Rank3TensorParameter">TdRank3TensorParameter</link>(name, value=None, default=None, tip=None) </programlisting>
      </refsect2><!-- Rank 3 Tensor Parameters -->
      <refsect2>
	<title>Rank 2 Tensor Parameters</title>
	<programlisting>
from oof2.SWIG.engine.symmmatrix import *

<link linkend="Class-Rank2TensorParameter">SymmMatrix3Parameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-Rank2TensorParameter">MonoclinicRank2TensorParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-Rank2TensorParameter">OrthorhombicRank2TensorParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-Rank2TensorParameter">TetragonalRank2TensorParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-Rank2TensorParameter">TrigonalRank2TensorParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-Rank2TensorParameter">HexagonalRank2TensorParameter</link>(name, value=None, default=None, tip=None)

<link linkend="Class-Rank2TensorParameter">CubicRank2TensorParameter</link>(name, value=None, default=None, tip=None) </programlisting>
      </refsect2><!-- Rank 2 Tensor Parameters -->
      <refsect2>
	<title>Miscellaneous Parameters</title>
	<programlisting>
from oof2.SWIG.engine.outputval import *

<link linkend="Class-OutputValParameter">OutputValParameter</link>(name, value=None, default=None, top=None)
	
from oof2.SWIG.common.coord import *

<link linkend="Class-CoordParameter">CoordParameter</link>(name, value=None, default=None, top=None)
 </programlisting>
      </refsect2>
    </refsynopsisdiv>
    <refsection>
      <title>Description</title>
      <para>
	&oof2; menu items, and <link
	linkend="Class-Output"><classname>Outputs</classname></link>
	are both objects that describe a process, in which the user
	enters some values and an action is performed.  A <link
	linkend="Section-RegisteredClasses"><classname>RegisteredClass</classname></link>'s
	<classname>Registration</classname> and a <link
	linkend="Class-Property"><classname>Property</classname></link>'s
	<link
	linkend="Class-PropertyRegistration">PropertyRegistration</link>
	are similar: they take user-specified data and create an
	object of some sort.  In all these cases, the programmer has
	to specify in advance the form of the input expected from the
	user.  This is the job of the <classname>Parameter</classname>
	class and its multitudinous subclasses.
      </para>
      <para>
	The different <classname>Parameter</classname> subclasses
	represent input data of different types: integer, float,
	boolean, cubic rank 4 tensor,
	<foreignphrase>etc</foreignphrase>. Each subclass's
	constructor arguments specify the
	<classname>Parameter</classname>'s name (by which it'll be
	labelled in the GUI and in scripts), optional initial value,
	optional default value, and an optional (but strongly
	recommended) help string.  (Some types of
	<classname>Parameter</classname> require additional arguments,
	as described below.)
      </para>
      <para>
	For example, a menu item that requires the user to enter two
	values, a file name and a floating point number, would be
	defined with a parameter list like this:
	<programlisting>
params=[StringParameter(name='filename', tip='Write to this file'),
        FloatParameter(name='threshold', value=3.0, tip='...')] </programlisting>

	The menu item's callback function would then have two
	arguments called <varname>filename</varname> and
	<varname>threshold</varname>, whose value would be extracted
	from the <classname>Parameter</classname> objects after being
	set by the user.  <classname>PropertyRegistrations</classname>
	and <classname>RegisteredClass</classname>
	<classname>Registrations</classname> work just the same way:
	they have a list of <classname>Parameters</classname> that
	specifies the type and name of the arguments to the
	<classname>Property</classname> or
	<classname>RegisteredClass</classname> constructor. The
	registration mechanism extracts the values from the
	<classname>Parameters</classname> and passes them to the
	constructor when building an object.
      </para>
      <para>
	Each <classname>Parameter</classname> subclass has its own
	routines for creating GUI components, so that the GUI for
	invoking a menu item or parametrizing a
	<classname>Property</classname> is always appropriate for the
	type of data required.  For example, a <link
	linkend="Class-FloatParameter">FloatParameter</link> will
	create a box for entering a number, a <link
	linkend="Class-BooleanParameter"><classname>BooleanParameter</classname></link>
	will create on/off buttons, and an <link
	linkend="Class-EnumParameter"><classname>EnumParameter</classname></link>
	will create a pull-down menu of choices.
      </para>
      <para>
	TODO: Describe the purpose of the 'default' argument, unless
	it's no longer necessary after the Output classes have been
	rewritten.
      </para>
    </refsection>               <!-- Description -->
    <refsection>
      <title>Parameter Subclasses</title>
      <para>
	Not all of the <classname>Parameter</classname> subclasses
	used in &oof2; are listed here.  Some &oof2; modules create
	very specialized <classname>Parameters</classname> that aren't
	useful elsewhere.  The classes listed here hopefully suffice
	for &oof2; extensions.
      </para>
      <refsection>
	<title>Basic Parameters</title>
	<refsection id="Class-BooleanParameter">
	  <title><code>BooleanParameter(name, value, default=0, tip=None)</code></title>
	  <para>
	    A <classname>BooleanParameter</classname>'s value is
	    either <literal>True</literal> (1) or
	    <literal>False</literal> (0).  In the GUI it's displayed
	    as a checkbox.
	    <figure id="Figure-booleanwidget">
	      <title><classname>BooleanParameter</classname> Widget</title>
	      <mediaobject>
		<imageobject>
		  <imagedata fileref="FIGURES/widgets/boolean.png"
		    format="PNG"/>
		</imageobject>
		<imageobject>
		  <imagedata fileref="FIGURES/widgets/boolean.eps"
		    format="EPS"/>
		</imageobject>
		<caption>
		  <para>
		    The two states of a
		    <classname>BooleanParameter</classname>'s widget.
		  </para>
		</caption>
	      </mediaobject>
	    </figure>
	  </para>
	</refsection><!-- BooleanParameter -->
	<refsection id="Class-StringParameter">
	  <title><code>StringParameter(name, value=None, default=None, tip=None)</code></title>
	  <para>
	    A <classname>StringParameter</classname>'s value is a
	    character string.  It's GUI widget is an unadorned text
	    entry box.
	  </para>
	</refsection>
	<refsection id="Class-FloatParameter">
	  <title><code>FloatParameter(name, value=None, default=0.0, tip=None)</code></title>
	  <para>
	    A <classname>FloatParameter</classname>'s value is a
	    floating point number or an integer.  Its widget is an
	    unadorned text entry box.  Any floating point number or
	    integer can be entered, or anything that Python can
	    evaluate to form a floating point number.
	  </para>
	</refsection><!-- FloatParameter -->
	<refsection id="Class-IntParameter">
	  <title><code>IntParameter(name, value=None, default=0.0, tip=None)</code></title>
	  <para>
	    An <classname>IntParameter</classname>'s value is an
	    integer number.  Its widget is an unadorned text entry
	    box.  Any integer can be entered, or anything that Python
	    can evaluate to form an integer.
	  </para>
	</refsection><!-- IntParameter -->
	<refsection id="Class-EnumParameter">
	  <title><code>EnumParameter(name, enumclass, value=None,
	      default=None, tip=None)</code></title>
	  <para>
	    An <classname>EnumParameter</classname> is used to choose
	    one of the members of a given <link
	    linkend="Section-Enums"><classname>Enum</classname></link>
	    class, specified by the <varname>enumclass</varname>
	    argument.  The value is an instance of
	    the given class.
	  </para>
	  <para>
	    In the GUI, an <classname>EnumParameter</classname>
	    appears as a pull-down menu listing all of the values of
	    the given <classname>Enum</classname> class.  In scripts,
	    the assigned value can be either an instance of the
	    <classname>Enum</classname> class, or the
	    <emphasis>name</emphasis> of an instance of the class.
	  </para>
	  <para>
	    For example, the <xref linkend="Enum-Arrangement"/> class
	    enumerates the ways that an initial uniform triangular
	    &skel; can be created, and is used as a parameter in the
	    <xref linkend="RegisteredClass-TriSkeleton"/> class.
	    The <classname>Registration</classname> for that class
	    sets its parameters like this:
	    <programlisting>
params=[enum.EnumParameter('arrangement', enumclass=Arrangement)]</programlisting>
	    A <classname>TriSkeleton</classname> can be created in a
	    script like this:
	    <programlisting>
TriSkeleton(arrangement=Arrangement('moderate')) </programlisting>
	    using an actual <classname>Arrangement</classname> object
	    as the parameter value, but it can also be created more
	    compactly, like this:
	    <programlisting>
TriSkeleton(arrangement='moderate') </programlisting>	    
	    using a string instead.
	  </para>
	  <figure id="Figure-enumwidget">
	    <title><classname>EnumParameter</classname> Widget</title>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="FIGURES/widgets/enum.png"
		  format="PNG"/>
	      </imageobject>
	      <imageobject>
		<imagedata fileref="FIGURES/widgets/enum.eps"
		  format="EPS"/>
	      </imageobject>
	      <caption>
		<para>
		  An <classname>EnumParameter</classname> widget,
		  displaying its current value (left) and choosing a
		  new value (right).
		</para>
	      </caption>
	    </mediaobject>
	  </figure>
	</refsection><!-- EnumParameter -->
      </refsection><!-- Basic Parameters -->
      <refsection>
	<title>Range Parameters</title>
	<refsection id="Class-IntRangeParameter">
	  <title><code>IntRangeParameter(name, range, value=None,
	      default=None, tip=None)</code></title>
	  <para>
	    An <classname>IntRangeParameter</classname>'s value is an
	    integer constrained to lie within a given range.
	    Attempting to give it a value outside of the range is an
	    error.  The <varname>range</varname> argument is a Python
	    tuple, <code>(min, max)</code>, specifying the minimum and
	    maximum allowed values.
	  </para>
	  <para>
	    The GUI widget for a
	    <classname>IntRangeParameter</classname> is a slider with
	    a label.  The label shows the numeric value, and can also
	    be edited directly to change the slider position.
	  </para>
	  <figure id="Figure-intrangewidget">
	    <title><classname>IntRangeParameter</classname> Widget</title>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="FIGURES/widgets/intrange.png"
		  format="PNG"/>
	      </imageobject>
	      <imageobject>
		<imagedata fileref="FIGURES/widgets/intrange.eps"
		  format="EPS"/>
	      </imageobject>
	      <caption>
		<para>
		  The widget for an
		  <classname>IntRangeParameter</classname>, with the
		  slider on the left and a text entry box on the
		  right.
		</para>
	      </caption>
	    </mediaobject>
	  </figure>
	</refsection><!-- IntRangeParameter -->
	<refsection id="Class-FloatRangeParameter">
	  <title><code>FloatRangeParameter(name, range, value=None,
	      default=None, tip=None)</code></title>
	  <para>
	    A <classname>FloatRangeParameter</classname>'s value is an
	    floating point number constrained to lie within a given range.
	    Attempting to give it a value outside of the range is an
	    error.  The <varname>range</varname> argument is a Python
	    tuple, <code>(min, max, step)</code>, specifying the minimum and
	    maximum allowed values and the step size to use in the GUI.
	  </para>
	  <para>
	    The GUI widget for a
	    <classname>FloatRangeParameter</classname> is a slider with
	    a label.  The label shows the numeric value, and can also
	    be edited directly to change the slider position.
	  </para>
	  <figure id="Figure-floatrangewidget">
	    <title><classname>FloatRangeParameter</classname> Widget</title>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="FIGURES/widgets/floatrange.png"
		  format="PNG"/>
	      </imageobject>
	      <imageobject>
		<imagedata fileref="FIGURES/widgets/floatrange.eps"
		  format="EPS"/>
	      </imageobject>
	      <caption>
		<para>
		  The widget for an
		  <classname>FloatRangeParameter</classname>, with the
		  slider on the left and a text entry box on the
		  right.
		</para>
	      </caption>
	    </mediaobject>
	  </figure>
	</refsection><!-- FloatRangeParameter -->
      </refsection><!-- Range Parameters -->
      <refsection>
	<title>RegisteredClass Parameters</title>
	<refsection id="Class-RegisteredParameter">
	  <title><code>RegisteredParameter(name, reg, value=None,
	      default=None, tip=None)</code></title>
	  <para>
	    <link
	    linkend="Section-RegisteredClasses"><classname>RegisteredClasses</classname></link>
	    are &oof2; objects that can be constructed from
	    <classname>Registrations</classname>.
	    <classname>Registrations</classname> are closely related
	    to <link
	    linkend="Class-PropertyRegistration"><classname>PropertyRegistrations</classname></link>,
	    but are more general.  They contain information describing
	    how to create an instance of the
	    <classname>RegisteredClass</classname>.
	  </para>
	  <para>
	    <classname>RegisteredClasses</classname> always come in
	    groups, arranged in a class hierarchy. The base class of
	    each hierarchy holds a list of
	    <classname>Registrations</classname> (a
	    <emphasis>registry</emphasis>) for all of the subclasses
	    in the group.  For example, the <xref
	    linkend="RegisteredClass-SkeletonModifier"/> base class
	    contains the subclasses <xref
	    linkend="RegisteredClass-Refine"/>, <xref
	    linkend="RegisteredClass-Anneal"/>, <xref
	    linkend="RegisteredClass-Smooth"/>,
	    <foreignphrase>etc</foreignphrase>.
	  </para>
	  <para>
	    A <classname>RegisteredParameter</classname> is a
	    parameter whose value can be set to an instance of a
	    subclass of a given <classname>RegisteredClass</classname>
	    base class.  The <varname>reg</varname> argument to the
	    <classname>RegisteredParameter</classname> constructor
	    specifies the <classname>RegisteredClass</classname> base
	    class.  For example, a <classname>Parameter</classname>
	    whose value is an instance of the
	    <classname>SkeletonModifier</classname> class would be
	    created like this:
	    <programlisting>
RegisteredParameter('modifier', SkeletonModifier, tip='use this modifier')</programlisting>
	  </para>
	  <para>
	    The GUI widget for a
	    <classname>RegisteredParameter</classname> is a pull-down
	    menu containing the names of each of the subclasses.
	    Below the menu is a region containing widgets for each of
	    the chosen subclass's <classname>Parameters</classname>
	    (which may themselves be
	    <classname>RegisteredParameters</classname>!).
	  </para>
	  <figure id="Figure-rcf">
	    <title><classname>RegisteredParameter</classname> Widget</title>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="FIGURES/widgets/rcf.png"
		  format="PNG"/>
	      </imageobject>
	      <imageobject>
		<imagedata fileref="FIGURES/widgets/rcf.eps"
		  format="EPS"/>
	      </imageobject>
	      <caption>
		<para>
		  Three views of a
		  <classname>RegisteredParameter</classname> widget.
		  In the center, the pull-down menu is being used to
		  switch from one
		  <classname>RegisteredClass</classname> to
		  another. The two classes have different parameters,
		  as shown on the left and right.
		</para>
	      </caption>
	    </mediaobject>
	  </figure>
	</refsection><!-- RegisteredParameter -->
	<refsection id="Class-ConvertibleRegisteredParameter">
	  <title><code>ConvertibleRegisteredParameter(name, reg,
	      value=None, default=None, tip=None)</code></title>
	  <para>
	    A <classname>ConvertibleRegisteredClass</classname> is
	    like a <link
	    linkend="Section-RegisteredClasses"><classname>RegisteredClass</classname></link>,
	    except that the different subclasses refer to different
	    <emphasis>representations</emphasis> of the same thing,
	    rather than different things that happen to be in the same
	    category.  For example, <xref
	    linkend="RegisteredClass-OpaqueColor"/> is a
	    <classname>ConvertibleRegisteredClass</classname>, since
	    the different representations (<xref
	    linkend="RegisteredClass-RGBColor"/>, <xref
	    linkend="RegisteredClass-HSVColor"/>,
	    <foreignphrase>etc</foreignphrase>.) all create color
	    objects that can be converted into one another.  The
	    different <xref
	    linkend="RegisteredClass-SkeletonModifier"/> subclasses
	    discussed <link
	    linkend="Class-RegisteredParameter">above</link>, however,
	    cannot be converted into one another.
	  </para>
	  <para>
	    A <classname>ConvertibleRegisteredParameter</classname> is
	    a <link
	    linkend="Class-RegisteredParameter"><classname>RegisteredParameter</classname></link>
	    whose <varname>reg</varname> argument is a
	    <classname>ConvertibleRegisteredClass</classname>.
	  </para>
	  <para>
	    The GUI widget for a
	    <classname>ConvertibleRegisteredParameter</classname>
	    looks just like the widget for a
	    <classname>RegisteredParameter</classname>, but when the
	    user switches from one subclass to another, the old
	    displayed value is converted to the new form.
	  </para>
	  <figure id="Figure-convertiblercf">
	    <title><classname>ConvertibleRegisteredParameter</classname> Widget</title>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="FIGURES/widgets/convertible.png"
		  format="PNG"/>
	      </imageobject>
	      <imageobject>
		<imagedata fileref="FIGURES/widgets/convertible.eps"
		  format="EPS"/>
	      </imageobject>
	      <caption>
		<para>
		  An example of a
		  <classname>ConvertibleRegisteredParameter</classname>
		  widget. A color is displayed in RGB format (top) and
		  HSV format (bottom).  The pull-down menu is used to
		  switch between them (middle). This widget is not
		  quite a generic
		  <classname>ConvertibleRegisteredParameter</classname>
		  widget. It's been enhanced with the color swatches
		  at the bottom.
		</para>
	      </caption>
	    </mediaobject>
	  </figure>
	</refsection><!-- ConvertibleRegisteredParameter -->
	<refsection id="Class-RegisteredListParameter">
	  <title><code>RegisteredListParameter(name, reg, value=None,
	      default=[], tip=None)</code></title>
	  <para>
	    A <classname>RegisteredListParameter</classname> is like a
	    <link
	    linkend="Class-RegisteredParameter"><classname>RegisteredParameter</classname></link>,
	    except that instead of returning a single instance of a
	    <classname>RegisteredClass</classname> subclass, it
	    returns a list containing at most one of each subclass in
	    the given <classname>RegisteredClass</classname>'s registry.
	  </para>
	  <figure id="Figure-reglistwidget">
	    <title><classname>RegisteredListParameter</classname> widget</title>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="FIGURES/widgets/reglist.png"
		  format="PNG"/>
	      </imageobject>
	      <imageobject>
		<imagedata fileref="FIGURES/widgets/reglist.eps"
		  format="EPS"/>
	      </imageobject>
	      <caption>
		<para>
		  A <classname>RegisteredListParameter</classname>
		  widget for a <classname>RegisteredClass</classname>
		  with three subclasses.  With these settings, the
		  <classname>Parameter</classname>'s value contains
		  instances of the first two classes only.
		</para>
	      </caption>
	    </mediaobject>
	  </figure>
	</refsection><!-- ConvertibleRegisteredParameter -->
      </refsection><!-- RegisteredClass Parameters -->
      <refsection>
	<title>Automatic Parameters</title>
	<para>
	  Automatic parameters are <classname>Parameters</classname>
	  that can take the value <varname>automatic</varname> as well
	  as other values which depend on the
	  <classname>Parameter</classname> type.<footnote>
	    <para>
	      <varname>automatic</varname> is an object defined in
	      the module <code>oof2.common.IO.automatic</code> and
	      imported into the &oof2; environment in which all
	      scripts are run.
	    </para>
	  </footnote>
	  When a parameter is set to <varname>automatic</varname>, the
	  program is supposed to choose some sensible default value
	  for it.
	</para>
	<para>
	  For example, when creating a &micro; from an &image; with
	  <xref
	  linkend="MenuItem-OOF.Microstructure.Create_From_ImageFile"/>,
	  the <varname>height</varname> and <varname>width</varname>
	  parameters are both <link
	  linkend="Class-AutoIntParameter"><classname>AutoIntParameters</classname></link>.
	  The callback function for that menu item makes assumptions
	  about the size and/or aspect ratio of the pixels if either
	  <varname>height</varname> or <varname>width</varname> are set to
	  <varname>automatic</varname>.
	</para>
	<para>
	  In the GUI, automatic parameters have a checkbox that sets
	  them to <varname>automatic</varname> and a text entry box
	  in which other values can be entered.
	</para>
	<refsection id="Class-AutoNumericParameter">
	  <title><code>AutoNumericParameter(name, value=None, default=None,
	    tip=None</code></title>
	  <para>
	    The <classname>AutoNumericParameter</classname> can bet
	    set to any numeric value (integer or floating point), or
	    to the special variable <varname>automatic</varname>.
	  </para>
	  <figure id="Figure-autonumericwidget">
	    <title><classname>AutoNumericParameter</classname> widget</title>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="FIGURES/widgets/autonumeric.png"
		  format="PNG"/>
	      </imageobject>
	      <imageobject>
		<imagedata fileref="FIGURES/widgets/autonumeric.eps"
		  format="EPS"/>
	      </imageobject>
	      <caption>
		<para>
		  Two <classname>AutoNumericParameter</classname>
		  widgets.  The lower one is set to
		  <literal>automatic</literal>.
		</para>
	      </caption>
	    </mediaobject>
	  </figure>
	</refsection><!-- AutoNumericParameter -->
	<refsection id="Class-AutoIntParameter">
	  <title><code>AutoIntParameter(name, value=None,
	      default=None, tip=None)</code></title>
	  <para>
	    The <classname>AutoIntParameter</classname> can be set to
	    an integer or to the special variable
	    <varname>automatic</varname>.
	  </para>
	  <figure id="Figure-autointwidget">
	    <title><classname>AutoIntParameter</classname> widget</title>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="FIGURES/widgets/autoint.png"
		  format="PNG"/>
	      </imageobject>
	      <imageobject>
		<imagedata fileref="FIGURES/widgets/autoint.eps"
		  format="EPS"/>
	      </imageobject>
	      <caption>
		<para>
		  An <classname>AutoIntParameter</classname> widget,
		  set to <literal>automatic</literal> on the left and
		  to 2 on the right.
		</para>
	      </caption>
	    </mediaobject>
	  </figure>
	</refsection><!-- AutoIntParameter -->
	<refsection id="Class-AutomaticNameParameter">
	  <title><code>AutomaticNameParameter(name, resolver,
	      value=None, default=None, tip=None)</code></title>
	  <para>
	    The <classname>AutomaticNameParameter</classname> can be
	    set to either a string or the object
	    <varname>automatic</varname>.  When asked for its value,
	    however, it always returns a string, which is generated
	    from the raw input by calling the provided
	    <varname>resolver</varname> function.  The arguments to
	    the resolver are the parameter and the raw input.  The
	    resolver can use the boolean function
	    <methodname>AutomaticNameParameter.automatic()</methodname>
	    to see if the raw input was <varname>automatic</varname>.
	  </para>
	</refsection><!-- AutomaticNameParameter -->
      </refsection><!-- Automatic Parameters -->
      <refsection>
	<title>Who Parameters</title>
	<para>
	  Within &oof2;, the classes of objects that can be displayed
	  in the graphics window are called
	  <classname>WhoClasses</classname>.  (In early versions of
	  the program, graphics layers were determined by specifying
	  <emphasis>who</emphasis> (the object being displayed),
	  <emphasis>what</emphasis> (which feature of it to display),
	  <emphasis>where</emphasis>, and <emphasis>how</emphasis>.
	  Things that used be called <quote>Whos</quote> are now
	  called <quote>Contexts</quote> in some places, but the name
	  <classname>WhoClass</classname> has survived.) 
	  The primary <classname>WhoClasses</classname> are
	  <classname>MicrostructureContext</classname>,
	  <classname>ImageContext</classname>,
	  <classname>SkeletonContext</classname>, and
	  <classname>Mesh</classname>, but
	  <classname>PixelSelectionContext</classname> and
	  <classname>ActiveAreaContext</classname> are
	  <classname>WhoClasses</classname> as well.
	</para>
	<refsection id="Class-WhoParameter">
	  <title><code>WhoParameter(name, whoclass, value=None,
	    default=None, tip=None)</code></title>
	  <para>
	    A <classname>WhoParameter</classname> can be set to the
	    path name of an existing object in the given
	    <varname>whoclass</varname> (see <xref
	      linkend="Section-Concepts-Path"/>).  In the GUI, a
	    <classname>WhoParameter</classname> appears as a set of
	    pull-down menus, one for each path component, allowing the
	    user to choose from the existing objects in the class.
	    See <xref linkend="Figure-WhoWidgets"/>.
	  </para>
	</refsection><!-- WhoParameter -->
	<refsection id="Class-AnyWhoParameter">
	  <title><code>AnyWhoParameter(name, value=None, default=None,
	    tip=None)</code></title>
	  <para>
	    An <classname>AnyWhoParameter</classname> can be set to
	    the path name of any existing object in any
	    <classname>WhoClass</classname>.
	  </para>
	</refsection><!-- AnyWhoParameter -->
	<refsection id="Class-NewWhoParameter">
	  <title><code>NewWhoParameter(name, whoclass, value=None,
	      default=None, tip=None)</code></title>
	  <para>
	    A <classname>NewWhoParameter</classname> is just like a
	    <link
	    linkend="Class-WhoParameter"><classname>WhoParameter</classname></link>,
	    but it's not restricted to existing objects in the given
	    <varname>whoclass</varname>.  <xref
	    linkend="MenuItem-OOF.Image.Copy"/> uses a
	    <classname>NewWhoParameter</classname> to pick the &micro;
	    to which an &image; is to be copied, creating a new
	    &micro; if the given one does not exist.
	  </para>
	</refsection><!-- NewWhoParameter -->
	<refsection id="Class-WhoClassParameter">
	  <title><code>WhoClassParameter(name, value=None,
	      default=None, condition=noSecretClasses, tip=None)</code></title>
	  <para>
	    A <classname>WhoClassParameter</classname> can be set to
	    the <varname>name</varname> of any
	    <classname>WhoClass</classname> that meets the specified
	    <varname>condition</varname>.  The default behavior is to
	    allow any<classname>WhoClasses</classname> that don't have
	    their <varname>secret</varname> flag set.
	  </para>
	  <para>
	    The <guilabel>category</guilabel> menu in the
	    <guilabel>Displayed Object</guilabel> pane of the
	    NOT THE LAYEREDITOR is a widget for a
	    <classname>WhoClassParameter</classname>.
	  </para>
	</refsection><!-- WhoClassParameter -->
      </refsection><!-- Who Parameters -->
      <refsection>
	<title>Mesh Object Parameters</title>
	<refsection id="Class-FieldParameter">
	  <title><code>FieldParameter(name, value=None, default=None,
	      tip=None, outofplane=0)</code></title>
	  <para>
	    A <classname>FieldParameter</classname>'s value is a <link
	    linkend="Class-Field"><classname>Field</classname></link>
	    instance.  If <varname>outofplane</varname> is 0, then the
	    field must be a <link
	    linkend="Class-CompoundField"><classname>CompoundField</classname></link>,
	    but if <varname>outofplane</varname> is 1, all types of
	    <classname>Field</classname> are allowed.
	  </para>
	  <para>
	    The GUI widget for a <classname>FieldParameter</classname>
	    is a pull-down menu listing all of the
	    <classname>Fields</classname> defined on the
	    &mesh;.<footnote id="Footnote:askmesh">
	      <para>
		Which &mesh;?  The widget looks for a nearby &mesh;
		<classname>WhoClass</classname> widget and asks it.
	      </para>
	    </footnote>
	  </para>
	</refsection><!-- FieldParameter -->
	<refsection id="Class-FluxParameter">
	  <title><code>FluxParameter(name, value=None, default=None, tip=None)</code></title>
	  <para>
	    A <classname>FluxParameter</classname>'s value is a <link
	    linkend="Class-Flux"><classname>Flux</classname></link>
	    instance. It's GUI widget is a pull-down menu listing all
	    of the &fluxes; that are currently active on the
	    &mesh;.<footnoteref linkend="Footnote:askmesh"/>
	  </para>
	</refsection><!-- FluxParameter -->
	<refsection id="Class-EquationParameter">
	  <title><code>EquationParameter(name, value=None,
	      default=None, tip=None)</code></title>
	  <para>
	    An <classname>EquationParameter</classname>'s value is an
	    <link
	    linkend="Class-Equation"><classname>Equation</classname></link>
	    instance.  It's GUI widget is a pull-down menu listing all
	    of the &equations; that are currently active on the
	    &mesh;.<footnoteref linkend="Footnote:askmesh"/>
	  </para>
	</refsection><!-- EquationParameter -->
	<refsection id="Class-FieldIndexParameter">
	  <title><code>Class:FieldIndexParameter</code></title>
	  <para>

	  </para>
	</refsection>
      </refsection><!-- Mesh Object Parameters -->
      <refsection>
	<title>Tensor Parameters</title>
	<refsection id="Class-CijklParameter">
	  <title>Rank 4 Tensor Parameters</title>
	  <para>
	    The various rank 4 tensor <classname>Parameter</classname>
	    classes, all called
	    <classname>SomethingCijklParameter</classname>, have
	    values that are restricted to rank 4 tensors of a
	    particular symmetry.  The
	    <classname>IsotropicCijklParameter</classname> and
	    <classname>CubicCijklParameter</classname> are <link
	    linkend="Class-ConvertibleRegisteredParameter"><classname>ConvertibleRegisteredParameters</classname></link>,
	    since there are many different representations for <link
	    linkend="RegisteredClass-IsotropicRank4Tensor">isotropic</link>
	    and <link
	    linkend="RegisteredClass-CubicRank4Tensor">cubic</link>
	    rank 4 tensors.
	  </para>
	  <para>
	    The GUI widgets for all of the rank 4 tensor
	    <classname>Parameters</classname> display a 6&times;6
	    upper diagonal matrix, using Voigt notation to reduce four
	    indices to two.  Entries in the matrix that are
	    constrained to be zero by symmetry are uneditable, and
	    entries that depend on other entries update themselves
	    when their dependent entries change.  In addition, the
	    widgets for <classname>IsotropicCijklParameter</classname>
	    and <classname>CubicCijklParameter</classname> have
	    pull-down menus for selecting a representation.
	  </para>
	  <figure id="Figure-rank4widget">
	    <title>Rank 4 Tensor Parameter Widget</title>
	    <mediaobject>
	      <imageobject>
		<imagedata
		  fileref="FIGURES/widgets/hexagonalcijkl.png"
		  format="PNG"/>
	      </imageobject>
	      <imageobject>
		<imagedata
		  fileref="FIGURES/widgets/hexagonalcijkl.eps"
		  format="EPS"/>
	      </imageobject>
	      <caption>
		<para>
		  A widget for a rank 4 tensor (hexagonal, in this
		  case).  The grayed out boxes are set by symmetry and
		  cannot be edited.  The row and column labels are
		  Voigt indices.
		</para>
	      </caption>
	    </mediaobject>
	  </figure>
	</refsection><!-- Rank 4 Tensor Parameters -->
	<refsection id="Class-Rank3TensorParameter">
	  <title>Rank 3 Tensor Parameters</title>
	  <para>
	    The rank 3 tensor <classname>Parameter</classname> classes,
	    all called
	    <classname>SomethingRank4TensorParameter</classname>, have
	    values that are restricted to rank 3 tensors of a
	    particular symmetry, indicated by the
	    <classname>Parameter</classname> name.  See <xref
	      linkend="Object-Rank 3 Tensors"/>.
	  </para>
	  <para>
	    The GUI widget for rank 3 tensors is an 3&times;6 array of
	    entry boxes.  The three rows correspond to the first
	    tensor index, and the three columns correspond to the
	    Voigt representation of the other two indices.
	  </para>
	  <figure id="Figure-rank3widget">
	    <title>Rank 3 Tensor Parameter Widget</title>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="FIGURES/widgets/rank3.png"
		  format="PNG"/>
	      </imageobject>
	      <imageobject>
		<imagedata fileref="FIGURES/widgets/rank3.eps"
		  format="EPS"/>
	      </imageobject>
	      <caption>
		<para>
		  A widget for a rank 3 tensor
		  <classname>Parameter</classname> with C6v symmetry.
		  The grayed out entries are constrained by symmetry
		  and by the other entries.
		</para>
	      </caption>
	    </mediaobject>
	  </figure>
	</refsection><!-- Rank 3 Tensor Parameters -->
	<refsection id="Class-Rank2TensorParameter">
	  <title>Rank 2 Tensor Parameters</title>
	  <para>
	    The rank 2 tensor <classname>Parameter</classname> classes
	    have values that are restricted to symmetric rank 2
	    tensors of a particular rotational symmetry.  The
	    rotational symmetry is indicated by the name of the
	    <classname>Parameter</classname> class.  The
	    <classname>SymmMatrix3Parameter</classname> represents a
	    general symmetric rank 2 tensor.  Not all of the other
	    subclasses are unique &mdash; for example, tetragonal and
	    trigonal rank 2 tensors are identical.  See <xref
	      linkend="Object-Rank 2 Tensors"/>.
	  </para>
	  <para>
	    The GUI widgets for rank 2 tensor
	    <classname>Parameters</classname> display an upper
	    diagonal 3&times;3 matrix.  Matrix elements that are
	    forced to be zero by symmetry cannot be edited.  The other
	    entries can be changed.  Some entries update themselves
	    when others are changed, to satisfy symmetry requirements.
	  </para>
	  <figure id="Figure-rank2widget">
	    <title>Rank 2 Tensor <classname>Parameter</classname> Widget</title>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="FIGURES/widgets/rank2.png"
		  format="PNG"/>
	      </imageobject>
	      <imageobject>
		<imagedata fileref="FIGURES/widgets/rank2.eps"
		  format="EPS"/>
	      </imageobject>
	      <caption>
		<para>
		  A rank 2 tensor <classname>Parameter</classname>'s
		  widget.  The values in the grayed-out boxes are
		  determined by symmetry.
		</para>
	      </caption>
	    </mediaobject>
	  </figure>
	</refsection>
      </refsection><!-- Tensor Parameters -->
      <refsection>
	<title>Miscellaneous Parameters</title>
	<refsection id="Class-OutputValParameter">
	  <title><code>OutputValParameter(name, value=None,
	      default=None, tip=None)</code></title>
	  <para>
	    <classname>OutputValParameters</classname> are used in
	    <link
	    linkend="Section-Coding-Output"><classname>Outputs</classname></link>
	    to specify that the input to the
	    <classname>Output</classname> is a stream of <link
	    linkend="Class-OutputVal"><classname>OutputVal</classname></link>
	    objects from another <link
	    linkend="Class-Output"><classname>Output</classname></link>.
	  </para>
	</refsection><!-- OutputValParameter -->
	<refsection id="Class-CoordParameter">
	  <title><code>CoordParameter(name, value=None, default=None, tip=None)</code></title>
	  <para>
	    Despite its name, a
	    <classname>CoordParameter</classname>'s value can be
	    either a <link
	    linkend="Class-Coord"><classname>Coord</classname></link>
	    or a <link
	    linkend="Class-Point"><classname>Point</classname></link>.
	  </para>
	</refsection>
  </refsection>                 <!-- Miscellaneous Parameters -->
</refsection>                   <!-- Parameter Subclasses -->
</refentry>                     <!-- Parameter -->

  
<refentry id="Function-acquirePyLock">
  <refnamediv>
	<refname>acquirePyLock</refname>
	<refpurpose>ensure thread-safe Python API calls</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
	<programlisting>
#include "common/threadstate.h" </programlisting>
	<funcsynopsis>
	  <funcprototype>
	    <funcdef>
	      <type>void</type>
	      <function>acquirePyLock</function>
	    </funcdef>
	    <void/>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis>
	  <funcprototype>
	    <funcdef>
	      <type>void</type>
	      <function>releasePyLock</function>
	    </funcdef>
	    <void/>
	  </funcprototype>
	</funcsynopsis>	
  	<programlisting>
#include "common/ooferror.h" </programlisting>
	<funcsynopsis>
	  <funcprototype>
	    <funcdef>
	      <type>void</type>
	      <function>pythonErrorRelay</function>
	    </funcdef>
	    <void/>
	  </funcprototype>
	</funcsynopsis>
  </refsynopsisdiv>
  <refsection>
	<title>Description</title>
	<para>
	  The three functions described here are used whenever &oof2;
	  C++ code calls Python API functions that might invoke the
	  Python interpreter.  It's often difficult to tell when the
	  interpreter will be invoked, so it's a good idea to treat
	  <emphasis>all</emphasis> Python API calls in this way.  See
	  <ulink url="http://docs.python.org/ext/thinIce.html"
	         role="external"/> for a relevant discussion (although in a
	  different context).
	</para>
	<para>
	  Because the Python interpreter is not thread safe, whenever
	  a C++ function in &oof2; needs to call the Python API, it
	  must first acquire the Python global interpreter lock by
	  calling <function>acquirePyLock()</function>.  When it's
	  through with the Python API calls, it must release the lock
	  by calling <function>releasePyLock()</function>. 
	</para>
	<para>
	  A function that neglects to call
	  <function>acquirePyLock()</function> risks crashing the
	  Python interpreter.  A function that neglects to call
	  <function>releasePyLock</function> will probably deadlock
	  the program when the C++ routine finishes.  If running
	  &oof2; with the <link
	  linkend="CommandLineArg-unthreaded"><userinput>--unthreaded</userinput></link>
	  option solves a crashing or deadlocking problem, then check
	  the code for missing calls to
	  <function>acquirePyLock</function> and
	  <function>releasePyLock</function>.
	</para>
	<para>
	  It is important to ensure that
	  <function>releasePyLock</function> is called even if an
	  exception is thrown during the Python API calls.  Python API
	  calls should always occur within a <code>try
	  ... catch</code> block, like this:
	  <programlisting>
        #include "common/threadstate.h"

        acquirePyLock();
        try {
        // Call Python API
        }
        catch (...) {
        releasePyLock();
        throw;
        }
      releasePyLock(); </programlisting>
	</para>
	<para>
	  It's possible that calls to the Python API will raise a
	  Python exception but <emphasis>not</emphasis> throw a C++
	  exception.  Generally, if a Python API function returns
	  <varname>NULL</varname>, an exception has been raised.  The
	  &oof2; function <function>pythonErrorRelay</function>
	  ensures that Python exceptions are re-raised in Python when
	  the C++ function exits.  It should be used like this:

	  <programlisting>
        #include "common/ooferror.h"
        #include "common/threadstate.h"

        acquirePyLock();
        try {
        PyObject *func, *args; // assume these have been set
        PyObject *result = PyEval_Call_Object(func, args); // for example 
        if(result == NULL) 
        pythonErrorRelay();
        // do something with result
        }
        catch (...) {
        releasePyLock();
        throw;
        }
      releasePyLock(); </programlisting>	  

	  <function>pythonErrorRelay</function> raises a C++ exception
	  that will be converted back into a Python exception when
	  control returns to Python.  The mechanism even works if the
	  Python exception was caused by a C++ exception that occurred
	  during a second call back into C++, as long as the original
	  C++ exception was derived from the &oof2; <link
	  linkend="Class-ErrError"><classname>ErrError</classname></link>
	  class.
	</para>
  </refsection>
</refentry><!-- acquirePyLock -->

<!-- ============================================================== -->

<refentry id="Class-ErrError">
  <refnamediv>
	<refname>ErrError</refname>
	<refpurpose>Classes and functions for handling exceptions</refpurpose>
  </refnamediv>
      <refsynopsisdiv>
	    <title>Synopses</title>
	    <refsect2>
	      <title>C++ Synopsis</title>
	      <programlisting>
#include "common/ooferror.h" </programlisting>
	      <classsynopsis language="cpp">
	        <ooclass>
	          <classname>ErrError</classname>
	        </ooclass>
	        <methodsynopsis>
	          <modifier>virtual</modifier>
	          <type>std::string</type>
	          <methodname>pythonequiv</methodname>
	          <void/>
	        </methodsynopsis>
	        <methodsynopsis>
	          <modifier>virtual</modifier>
	          <type>std::string</type>
	          <methodname>message</methodname>
	          <void/>
	        </methodsynopsis>
	      </classsynopsis>      <!-- ErrError -->
	      <classsynopsis language="cpp">
	        <ooclass>
	          <modifier>template &lt;class E&gt;</modifier>
	          <classname>ErrErrorBase</classname>
	        </ooclass>
	        <ooclass>
	          <modifier>public</modifier>
	          <classname>ErrError</classname>
	        </ooclass>
	      </classsynopsis><!-- ErrErrorBase -->
	      <para>
	        The following subclasses are all derived from the
	        <classname>ErrErrorBase</classname> template, but the base
	        class has been omitted here for clarity.
	      </para>
	      <classsynopsis language="cpp">
	        <ooclass>
	          <classname><link linkend="Class-ErrProgrammingError">ErrProgrammingError</link></classname>
	        </ooclass>
	        <constructorsynopsis>
	          <methodname>ErrProgrammingError</methodname>
	          <methodparam>
		        <type>const std::string&amp;</type>
		        <parameter>filename</parameter>
	          </methodparam>
	          <methodparam>
		        <type>int</type>
		        <parameter>line</parameter>
	          </methodparam>
	        </constructorsynopsis>
	        <constructorsynopsis>
	          <methodname>ErrProgrammingError</methodname>
	          <methodparam>
		        <type>const std::string&amp;</type>
		        <parameter>message</parameter>
	          </methodparam>
	          <methodparam>
		        <type>const std::string&amp;</type>
		        <parameter>filename</parameter>
	          </methodparam>
	          <methodparam>
		        <type>int</type>
		        <parameter>line</parameter>
	          </methodparam>
	        </constructorsynopsis>
	      </classsynopsis>      <!-- ErrProgrammingError -->
	      <classsynopsis language="cpp">
	        <ooclass>
	          <classname><link linkend="Class-ErrIndexError">ErrIndexError</link></classname>
	        </ooclass>
	        <constructorsynopsis>
	          <methodname>ErrIndexError</methodname>
	          <methodparam>
		        <type>const std::string&amp;</type>
		        <parameter>message</parameter>
	          </methodparam>
	        </constructorsynopsis>
	      </classsynopsis>      <!-- ErrIndexError -->
	      <classsynopsis language="cpp">
	        <ooclass>
	          <classname><link linkend="Class-ErrUserError">ErrUserError</link></classname>
	        </ooclass>
	        <constructorsynopsis>
	          <methodname>ErrUserError</methodname>
	          <methodparam>
		        <type>const std::string&amp;</type>
		        <parameter>message</parameter>
	          </methodparam>
	        </constructorsynopsis>
	      </classsynopsis><!-- ErrUserError -->
	      <classsynopsis language="cpp">
	        <ooclass>
	          <classname><link linkend="Class-ErrSetupError">ErrSetupError</link></classname>
	        </ooclass>
	        <constructorsynopsis>
	          <methodname>ErrSetupError</methodname>
	          <methodparam>
		        <type>const std::string&amp;</type>
		        <parameter>message</parameter>
	          </methodparam>
	        </constructorsynopsis>
	      </classsynopsis><!-- ErrSetupError -->
	    </refsect2><!-- C++ Synopsis -->
	    <refsect2>
	      <title>Python Synopsis</title>
	      <programlisting>
from oof2.SWIG.common.ooferror import ErrProgrammingError
from oof2.SWIG.common.ooferror import ErrIndexError
from oof2.SWIG.common.ooferror import ErrUserError
from oof2.SWIG.common.ooferror import ErrSetupError </programlisting>
     	  <classsynopsis language="python">
	        <ooclass>
	          <classname><link linkend="Class-ErrProgrammingError">ErrProgrammingError</link></classname>
	        </ooclass>
	        <constructorsynopsis>
	          <methodparam>
		        <parameter>message</parameter>
	          </methodparam>
	          <methodparam>
		        <parameter>filename</parameter>
	          </methodparam>
	          <methodparam>
		        <parameter>line</parameter>
	          </methodparam>
	        </constructorsynopsis>
	      </classsynopsis>      <!-- ErrProgrammingError -->
	      <classsynopsis language="python">
	        <ooclass>
	          <classname><link linkend="Class-ErrPyProgrammingError">ErrPyProgrammingError</link></classname>
	        </ooclass>
	        <constructorsynopsis>
	          <methodparam>
		        <parameter>message</parameter>
	          </methodparam>
	        </constructorsynopsis>
	      </classsynopsis><!-- ErrPyProgrammingError -->
	      <classsynopsis language="python">
	        <ooclass>
	          <classname><link linkend="Class-ErrIndexError">ErrIndexError</link></classname>
	        </ooclass>
	        <constructorsynopsis>
	          <methodparam>
		        <parameter>message</parameter>
	          </methodparam>
	        </constructorsynopsis>
	      </classsynopsis><!-- ErrIndexError -->
	      <classsynopsis language="python">
	        <ooclass>
	          <classname><link linkend="Class-ErrUserError">ErrUserError</link></classname>
	        </ooclass>
	        <constructorsynopsis>
	          <methodparam>
		        <parameter>message</parameter>
	          </methodparam>
	        </constructorsynopsis>
	      </classsynopsis><!-- ErrUserError -->
	      <classsynopsis language="python">
	        <ooclass>
	          <classname><link linkend="Class-ErrSetupError">ErrSetupError</link></classname>
	        </ooclass>
	        <constructorsynopsis>
	          <methodparam>
		        <parameter>message</parameter>
	          </methodparam>
	        </constructorsynopsis>
	      </classsynopsis><!-- ErrSetupError -->
	      <programlisting>
<link linkend="Function-registerErrorClass">registerErrorClass</link>(exc_class)
</programlisting>
        </refsect2><!-- Python Synopsis -->
	    <refsect2>
	      <title>Source Files</title>
	      <itemizedlist spacing="compact">
	        <listitem>
	          <simpara><filename>SRC/common/ooferror.h</filename></simpara>
	        </listitem>
	        <listitem>
	          <simpara><filename>SRC/common/ooferror.C</filename></simpara>
	        </listitem>
	        <listitem>
	          <simpara><filename>SRC/common/ooferror.swg</filename></simpara>
	        </listitem>
	        <listitem>
	          <simpara><filename>SRC/common/ooferror.spy</filename></simpara>
	        </listitem>
	      </itemizedlist>
	    </refsect2>
      </refsynopsisdiv>
      <refsection>
	    <title>Description</title>
	    <para>
	      &oof2; predefines a number of useful exception classes for
	      handling errors, and includes a mechanism for adding new
	      classes.  The mechanism is non-trivial because exceptions
	      have to be able to pass back and forth between C++ and
	      Python.
	    </para>
	    <refsection>
	      <title>Predefined Exception Classes</title>
	      <para>
	        The following classes are all declared in
	        <filename>common/ooferror.h</filename>.  The Python
	        versions can be imported from
	        <code>oof2.SWIG.common.ooferror</code>.
	      </para>
	      <refsection id="Class-ErrProgrammingError">
	        <title><code>class ErrProgrammingError</code></title>
	        <para>
	          This exception indicates that an internal consistency
	          check failed.  Its constructor arguments are a message,
	          the name of the source file and the line number of the
	          code that raised the exception.  In C++, it's easily
	          called like this:
	          <programlisting>
throw ErrProgrammingError("Your message here", __FILE__, __LINE__);</programlisting>

	          In Python, it's easier to use <link
	          linkend="Class-ErrPyProgrammingError"><classname>ErrPyProgrammingError</classname></link>
	          instead.
	        </para>
	        <para>
	          Programming errors are usually fatal to the program.
	        </para>
	      </refsection><!-- ErrProgrammingError -->
	      <refsection id="Class-ErrPyProgrammingError">
	        <title><code>class ErrPyProgrammingError</code></title>
	        <para>
	          <classname>ErrPyProgrammingError</classname> is a Python
	          class derived from <link
	          linkend="Class-ErrProgrammingError"><classname>ErrProgrammingError</classname></link>.
	          It automatically sets the filename and line number
	          parameters by examining the Python traceback stack.  It
	          should be raised whenever an internal inconsistency is
	          detected in Python code.
	        </para>
	        <para>
	          Python programming errors are usually fatal to the
	          program.
	    </para>
	  </refsection><!-- ErrPyProgrammingError -->
	  <refsection id="Class-ErrIndexError">
	    <title><code>class ErrIndexError</code></title>
	    <para>
	      <classname>ErrIndexError</classname> indicates that an
	      array index is out of range.
	    </para> 
	  </refsection><!-- ErrIndexError -->
	  <refsection id="Class-ErrUserError">
	    <title><code>class ErrUserError</code></title>
	    <para>
	      <classname>ErrUserError</classname> indicates that the user
	      did something wrong.  The GUI should (and does) prevent most
	      user errors, but they can still occur if the user loads a
	      malformed script.  User errors should not be fatal (either
	      to the user or to the program).
	    </para>
	  </refsection><!-- ErrUserError -->
	  <refsection id="Class-ErrSetupError">
	    <title><code>class ErrSetupError</code></title>
	    <para>
	      An <classname>ErrSetupError</classname> is a particular
	      variety of <link linkend="Class-ErrUserError">user
	      error</link> indicating that the finite element system being
	      solved hasn't been defined properly.
	    </para>
	  </refsection>
	</refsection><!-- Predefined Exception Classes -->
	<refsection>
	  <title>Adding New Exception Classes</title>
	  <para>
	    In order for exceptions to propagate properly from C++ to
	    Python and back, all &oof2; exception classes must be derived
	    from <classname>ErrErrorBase</classname> in the following way:
	    <programlisting>
class MyError : public ErrErrorBase&lt;MyError&gt; {
public:
  MyError();
  virtual std::string pythonequiv() const;
  virtual std::string message() const;
}; </programlisting>
	  </para>
	  <para>
	    Note that the template parameter is the name of the subclass!
	  </para>
	  <para>
	    The function <methodname>pythonequiv()</methodname> must
	    return a string that, when evaluated by the Python
	    interpreter, will create the equivalent exception in
	    Python. The <classname>MyError</classname> example above would
	    define it like this:
	    <programlisting>
std::string MyError::pythonequiv() const {
  return "NewError()";
} </programlisting>
	  </para>
	  <para>
	    The function <methodname>message</methodname> should return a
	    string indicating what caused the exception.
	  </para>
	  <para>
        <anchor id="Function-registerErrorClass"/>
	    All new exception subclasses must be swigged, and the Python
	    function <function>registerErrorClass</function> must be
	    called with the swigged class as its argument.  (Exception
	    classes declared in <filename>SRC/common/ooferror.h</filename>
	    and swigged in <filename>SRC/common/ooferror.swg</filename>
	    are exempt from this requirement.)  For example, the
	    <classname>MyError</classname> class above would have a swig
	    file <filename>myerror.swg</filename> like this:
	    <programlisting>
%module myerror
%include "common/typemaps.swg"
%extern "common/ooferror.swg"
%{
#include "myerror.h"
%}

class MyError : public ErrError {
public:
  MyError();
  %addmethods {
    string __repr__() {
      return self->message();
    }
  }
};

%pragma(python) include="myerror.spy" </programlisting>

	    and <filename>myerror.spy</filename> would contain:
	    <programlisting>
from oof2.SWIG.common import ooferror
ooferror.registerErrorClass(MyError) </programlisting>
	  </para>
	  <para>
	    See <xref linkend="Section-Extending-swig"/> for more on
	    writing <application>swig</application> input files.
	  </para>
	  <para>
	    For more examples of &oof2; exception classes, see
	    <filename>SRC/engine/ooferror*</filename>.  (The exceptions
	    defined there have very specific internal uses and shouldn't
	    be used in &oof2; extensions, so they aren't discussed here.)
	    Note that it's not possible to derive new exceptions directly
	    from <link
	    linkend="Class-ErrUserError"><classname>ErrUserError</classname></link>
	    or <link
	    linkend="Class-ErrProgrammingError"><classname>ErrProgrammingError</classname></link>
	    because the template parameter would be wrong.  New exceptions
	    must be derived from the intermediate classes
	    <classname>ErrUserErrorBase</classname> or
	    <classname>ErrProgrammingErrorBase</classname>, or directly
	    from <classname>ErrErrorBase</classname>.
	  </para>
	</refsection><!-- Adding New Exception Classes -->
  </refsection>  <!-- Description -->
</refentry>      <!-- ErrError -->

<!-- ============================================================== -->

<refentry id="Function-xmlmenudump.loadFile">
    <refnamediv>
      <refname>loadFile</refname>
      <refpurpose>Load documentation from a file</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Python Synopsis</title>
      <programlisting>
from oof2.common.IO.xmlmenudump import loadFile

loadFile(filename, func=None) </programlisting> 
    </refsynopsisdiv>
    <refsection>
      <title>Description</title>
      <para>
	Many &oof2; objects contain their own documentation.  The
	<link linkend="Chapter-Reference">reference section</link> of
	the &oof2; manual is generated automatically from the
	<varname>discussion</varname> data in menu items, <link
	linkend="Class-PropertyRegistration"><classname>PropertyRegistrations</classname></link>,
	<foreignphrase>etc</foreignphrase>.  Short
	<varname>discussions</varname> can be simple character
	strings, but longer discussions are more conveniently stored
	in separate files.  In those cases,
	<varname>discussion</varname> should be set to the return
	value of <code>loadFile(filename)</code>, where
	<varname>filename</varname> is the file containing the
	discussion.  The file must contain text that is suitable for
	inclusion in a <ulink url="http://www.docbook.org"
	role="external">DocBook</ulink>
	<literal>&lt;refentry&gt;</literal> element.<footnote>
	  <para>
	    The simplest such text would be a single paragraph
	    surrounded by <literal>&lt;para&gt;</literal> and
	    <literal>&lt;/para&gt;</literal> tags.
	  </para>
	</footnote>
      </para>
      <para>
	The <varname>func</varname> argument, if specified, should be
	a function that is called to preprocess the contents of the
	file before it's included in the manual.  The arguments to
	<varname>func</varname> are <varname>text</varname> (the
	contents of the file) and <varname>obj</varname> (the menu
	item or <classname>PropertyRegistration</classname> or other
	object being documented).
      </para>
      <para>
	The file specified by <function>loadFile</function> isn't
	actually read until the manual is built (using the command
	<xref linkend="MenuItem-OOF.Help.API_Listing"/>.)  That means
	that if you have no intention of building your own version of
	the manual, you can specify anything you want for the
	filename.  Of course, in that case you can also omit the
	<varname>discussions</varname> entirely as well.
      </para>
      <para>
	The given filename is assumed to be relative to the
	<filename>OOF2/MAN_OOF2</filename> directory.  Because of its
	size, this directory isn't included in the standard &oof2;
	distributions, so it will be difficult for extension authors
	to generate their own customized version of the manual.
	Please contact the &oof2; authors if you need a copy.
      </para>
    </refsection>
</refentry>

</reference>

<!-- Keep this comment at the end of the file
  Local variables:
  sgml-omittag:t
  sgml-shorttag:t 
  sgml-namecase-general:nil
  sgml-minimize-attributes:nil
  sgml-always-quote-attributes:t
  sgml-indent-step:2
  sgml-indent-data:t
  sgml-parent-document:("../man_oof2.xml" "book" "chapter")
  sgml-exposed-tags:nil
  sgml-local-ecat-files:nil
  End:
-->
