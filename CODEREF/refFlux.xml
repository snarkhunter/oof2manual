<!-- 
  This software was produced by NIST, an agency of the
  U.S. government, and by statute is not subject to copyright in the
  United States.  Recipients of this software assume all
  responsibilities associated with its operation, modification and
  maintenance. However, to facilitate maintenance we ask that before
  distributing modified versions of this software, you first contact
  the authors at oof_manager@nist.gov.
-->

<refentry id="Class-Flux">
  <refnamediv>
    <refname>Flux</refname>
    <refpurpose>Base class for &fluxes;</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <title>Synopses</title>
    <para>
	  Only those methods useful when extending &oof2; are listed here.
    </para>
    <refsect2>
	  <title>C++ Synopsis</title>
	  <literallayout class="monospaced">
#include "engine/flux.h" </literallayout>
      <classsynopsis language="cpp">
	    <ooclass>
	      <classname>Flux</classname>
	    </ooclass>
	    <methodsynopsis>
	      <type>const std::string&amp;</type>
	      <methodname><link
		  linkend="Class-Flux-name">name</link></methodname>
	      <void/>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <methodsynopsis>
	      <type>int</type>
	      <methodname><link linkend="Class-Flux-ndof">ndof</link></methodname>
	      <void/>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <methodsynopsis>
	      <type>int</type>
	      <methodname><link linkend="Class-Flux-divergence_dim">divergence_dim</link></methodname>
	      <void/>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <methodsynopsis>
	      <type>ComponentsP</type>
	      <methodname><link linkend="Class-Flux-components">components</link></methodname>
	        <methodparam>
		      <type>Planarity</type>
		      <parameter>planarity</parameter>
	        </methodparam>
	        <modifier>const</modifier>
	    </methodsynopsis>
	    <methodsynopsis>
	      <type>ComponentsP</type>
	      <methodname><link linkend="Class-Flux-divergencecomponents">divergenceComponents</link></methodname>
	      <void/>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <methodsynopsis>
	      <type>ComponentsP</type>
	      <methodname><link linkend="Class-Flux-oop-components">outOfPlaneComponents</link></methodname>
	      <void/>
	      <modifier>const</modifier>
	    </methodsynopsis>
        <methodsynopsis>
          <modifier>virtual</modifier>
          <type>FieldIndex*</type>
          <methodname><link
                          linkend="Class-Flux-getIndex">getIndex</link></methodname>
          <methodparam>
            <modifier>const</modifier>
            <type>std::string&amp;</type>
            <parameter>name</parameter>
          </methodparam>
          <modifier>const</modifier>
        </methodsynopsis>

	    <methodsynopsis>
	      <type>ArithmeticOutputValue</type>
	      <methodname><link linkend="Class-Flux-output">output</link></methodname>
	      <methodparam>
            <modifier>const</modifier>
		    <type>FEMesh*</type>
		    <parameter>mesh</parameter>
	      </methodparam>
	      <methodparam>
            <modifier>const</modifier>
		    <type>Element*</type>
		    <parameter>element</parameter>
	      </methodparam>
	      <methodparam>
            <modifier>const</modifier>
		    <type>MasterPosition&amp;</type>
		    <parameter>pos</parameter>
	      </methodparam>
	      <modifier>const</modifier>
	    </methodsynopsis>
	  </classsynopsis>
    </refsect2>                 <!-- C++ Synopsis -->
    <refsect2>
	  <title>Python Synopsis</title>
	  <literallayout class="monospaced">
from ooflib.SWIG.engine import Flux </literallayout>
  	  <classsynopsis language="python">
	    <ooclass>
	      <classname>Flux</classname>
	    </ooclass>
	    <methodsynopsis>
	      <methodname><link linkend="Class-Flux-name">name</link></methodname>
          <void/>
	    </methodsynopsis>
	    <methodsynopsis>
	      <methodname><link linkend="Class-Flux-ndof">ndof</link></methodname>
	      <void/>
	    </methodsynopsis>
	    <methodsynopsis>
	      <methodname><link linkend="Class-Flux-divergence_dim">divergence_dim</link></methodname>
	      <void/>
	    </methodsynopsis>
	    <methodsynopsis>
	      <methodname><link
		                  linkend="Class-Flux-components">components</link></methodname>
	      <methodparam>
		    <parameter>planarity</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <methodsynopsis>
	      <methodname><link
		                  linkend="Class-Flux-divergencecomponents">divergenceComponents</link></methodname>
          <void/>
	    </methodsynopsis>
	    <methodsynopsis>
	      <methodname><link
		                  linkend="Class-Flux-oop-components">outOfPlaneComponents</link></methodname>
          <void/>
	    </methodsynopsis>
        <methodsynopsis>
          <methodname><link
                          linkend="Class-Flux-getIndex">getIndex</link></methodname>
          <methodparam>
            <parameter>name</parameter>
          </methodparam>
        </methodsynopsis>
	  </classsynopsis>
    </refsect2>                 <!-- Python Synopsis -->
    <refsect2>
	  <title>Subclasses</title>
	  <itemizedlist spacing="compact">
	    <listitem>
	      <simpara><link linkend="Class-VectorFlux"><classname>VectorFlux</classname></link></simpara>
	    </listitem>
	    <listitem>
	      <simpara><link linkend="Class-SymmetricTensorFlux"><classname>SymmetricTensorFlux</classname></link></simpara>
	    </listitem>
	  </itemizedlist>
    </refsect2>
    <refsect2>
	  <title>Source Files</title>
	  <itemizedlist spacing="compact">
	    <listitem>
	      <simpara>
	        <filename>SRC/engine/flux.h</filename>: C++ headers
	      </simpara>
	    </listitem>
	    <listitem>
	      <simpara>
	        <filename>SRC/engine/flux.C</filename>: C++ source code
	      </simpara>
	    </listitem>
	    <listitem>
	      <simpara>
	        <filename>SRC/engine/flux.swg</filename>: SWIG source code
	      </simpara>
	    </listitem>
	    <listitem>
	      <simpara>
	        <filename>SRC/engine/flux.spy</filename>: python code
	        included in <filename>flux.swg</filename>
	      </simpara>
	    </listitem>
	  </itemizedlist>
    </refsect2>                 <!-- Source Files -->
  </refsynopsisdiv>

  <refsection>
    <title>Description</title>
    <para>
	  <classname>Flux</classname> is the base class for all &flux;
	  objects.  Like <link
	  linkend="Class-Field"><classname>Fields</classname></link> and
	  <link
	  linkend="Class-Equation"><classname>Equations</classname></link>,
	  <classname>Fluxes</classname> are global objects.  There is only
	  one stress flux object, even though stress may be computed on
	  many different meshes.  <classname>Flux</classname> objects
	  store information about the physical flux, but do not store its
	  values.
    </para>
    <para>
	  <classname>Fluxes</classname> should only be created by calling
	  the Python constructors of the derived classes.  As with
	  &Fields; and &Equations; references to
	  <classname>Flux</classname> objects are kept in the main &oof2;
	  namespace in a variable whose name is the name passed to the
	  derived class constructor.  See <xref
	  linkend="Section-Coding-AddFields"/>. It is also possible to
	  retrieve a <classname>Flux</classname> by name using the <xref
	  linkend="Function-getFlux"/> function.
    </para>
  </refsection>
  <refsection>
    <title>Methods</title>
    <refsection id="Class-Flux-name">
	  <title><code>std::string &amp;name() const</code></title>
	  <para>
	    This returns the name that was assigned to this
	    <classname>Flux</classname> when it was created.  See <xref
	    linkend="Section-Coding-AddFields"/>.
	  </para>
    </refsection>               <!-- name -->
    <refsection id="Class-Flux-ndof">
	  <title><code>int ndof() const</code></title>
	  <para>
	    <methodname>ndof</methodname> returns the number of floating
	    point numbers required to represent a value of the
	    <classname>Flux</classname>.
	  </para>
    </refsection>               <!-- ndof -->
    <refsection id="Class-Flux-divergence_dim">
	  <title><code>int divergence_dim() const</code></title>
	  <para>
	    <methodname>divergence_dim</methodname> returns the number of
	    <emphasis>in-plane</emphasis> components in the
	    <classname>Flux</classname>'s divergence.  This is equal to
	    the number of <link
	    linkend="Class-Equation"><classname>Equations</classname></link>
	    required to solve the <classname>Flux</classname>'s divergence
	    equation.
	  </para>
    </refsection>               <!-- divergence_dim -->
    <refsection id="Class-Flux-components">
	  <title>
	    <code>const ComponentsP components(Planarity planarity) const</code>
	  </title>
	  <para>
	    <methodname>components</methodname> returns an <link
	    linkend="Class-ComponentsP"><classname>ComponentsP</classname></link>
	    object that can be used to loop over and refer to the
	    components of the <classname>Flux</classname>.  The given
	    <link
	    linkend="Class-Planarity"><classname>Planarity</classname></link>
	    determines whether the iteration should include the in-plane
	    components, out-of-plane components, or both.
	  </para>
    </refsection>               <!-- components -->
    <refsection id="Class-Flux-divergencecomponents">
	  <title><code>ComponentsP divergenceComponents() const</code></title>
	  <para>
	    <methodname>divergenceComponents</methodname> returns an <link
	    linkend="Class-ComponentsP"><classname>ComponentsP</classname></link>
	    object that can be used to loop over the in-plane components
	    of the divergence of the <classname>Flux</classname>.
	  </para>
    </refsection>               <!-- divergenceComponents -->
    <refsection id="Class-Flux-oop-components">
	  <title><code>ComponentsP outOfPlaneComponents() const</code></title>
	  <para>
	    <methodname>outOfPlaneComponents</methodname> returns an <link
	    linkend="Class-ComponentsP"><classname>ComponentsP</classname></link>
	    object that can be used to loop over the out-of-plane
	    components of the <classname>Flux</classname>.
	  </para>
      <caution id="Flux-confusion">
        <title>Possible Confusion</title>
        <para>
          The difference between
          <code>Flux::components(OUT_OF_PLANE)</code> and
          <code>Flux::outOfPlaneComponents()</code> needs some
          explanation.  They both refer to the same components of the
          <classname>Flux</classname>, in the same order.  But the
          first is used to locate the out-of-plane components in a
          list that contains all of the components and the second
          locates them in a list that contains only the out-of-plane
          components.  The difference is illustrated by using the
          <link
          linkend="FieldIndex-integer"><function>FieldIndex::integer()</function></link>
          method to examine the list indices of the components.
        </para>
        <para>
          For example, here are all the components of the Stress.
          (<link
          linkend="Class-SymTensorIndex"><classname>SymTensorIndex</classname></link>
          is the &FieldIndex; subclass for symmetric tensor indices):
            <programlisting>
>>> list(Stress.components())
[SymTensorIndex(0,0), SymTensorIndex(1,1), SymTensorIndex(2,2), SymTensorIndex(1,2), SymTensorIndex(0,2), SymTensorIndex(0,1)]</programlisting>

          <link
          linkend="Class-FieldIndex-integer"><function>FieldIndex::integer</function></link>
          converts a &FieldIndex; into the equivalent integer position
          in an array or list:
          <programlisting>
>>> list(ij.integer() for ij in Stress.components())
[0, 1, 2, 3, 4, 5] </programlisting>

          <function>components(OUT_OF_PLANE)</function> simply returns
          the out-of-plane parts of this set of indices, with the same
          integer positions:
          <programlisting>
>>> list(Stress.components(OUT_OF_PLANE))
[SymTensorIndex(2,2), SymTensorIndex(1,2), SymTensorIndex(0,2)]
>>> list(ij.integer() for ij in Stress.components(OUT_OF_PLANE))
[2, 3, 4] </programlisting>

          <function>outOfPlaneComponents</function> return the same
          indices, using a different &FieldIndex; subclass, and the
          integer indices are appropriate for a list or array
          containing only the out-of-plane components:
          <programlisting>
>>> list(Stress.outOfPlaneComponents())
[OutOfPlaneSymTensorIndex(2, 2), OutOfPlaneSymTensorIndex(1, 2), OutOfPlaneSymTensorIndex(0, 2)]
>>> list(ij.integer() for ij in Stress.outOfPlaneComponents())
[0, 1, 2] </programlisting>
          </para>
          <para>
            A similar issue arises with <link
            linkend="Field-confusion"><classname>Fields</classname></link>.
          </para>
      </caution>
    </refsection>                 <!-- outOfPlaneComponents -->
    <refsection id="Class-Flux-getIndex">
      <title><code>getIndex</code></title>
      <programlisting>
FieldIndex* getIndex(std::string&amp; name) const; </programlisting>

      <para>
        <function>getIndex()</function> returns a &FieldIndex; object,
        given the <varname>name</varname> of the desired index.
        Different <classname>Flux</classname> subclasses expect
        different strings, and return different subclasses of
        &FieldIndex;.  For example, a <link
        linkend="Class-SymmetricTensorFlux"><classname>SymmetricTensorFlux</classname></link>
        expects the <varname>name</varname> to be
        <userinput>"xx"</userinput>, <userinput>"xy"</userinput>,
        <userinput>"yz"</userinput>,
        <foreignphrase>etc</foreignphrase>, and returns a <link
        linkend="Class-SymTensorIndex"><classname>SymTensorIndex</classname></link>.
      </para>
      <para>
        In C++ the returned value is a pointer to a newly allocated
        object.  The caller is responsible for deleting it.  An easy
        way to do that is to wrap it in an &IndexP;:
        <programlisting>
Flux *flux = ...;
IndexP index = IndexP(flux->getIndex("xx")); </programlisting>
      </para>
    </refsection>
    <refsection id="Class-Flux-output">
	  <title>
	    <code>
	      ArithmeticOutputValue output(const FEMesh*, const Element*, const MasterPosition&amp;) const
	    </code>
	  </title>
	  <para>
	    <methodname>output</methodname> is similar to <link
	    linkend="Class-Field-output"><methodname>Field::output</methodname></link>
	    &mdash; it returns the value of the
	    <classname>Flux</classname> at a given point.  It differs in
	    that it is computed at an arbitrary point within an &elem;,
	    specified by a <link
	    linkend="Class-MasterPosition"><classname>MasterPosition</classname></link>,
	    instead of at a &node;.<footnote><para>This is because
	    &fluxes; depend on &field; gradients, which are computed
	    within &elems;, whereas &Field; values are stored at
	    &nodes;. </para></footnote>
      </para>
      <para>
        The return value is an <link
        linkend="Class-OutputValue"><classname>OutputValue</classname></link>,
        which wraps the appropriate <link
        linkend="Class-OutputVal"><classname>OutputVal</classname></link>
        derived class.
	  </para>
	  <para>
        The arguments are:
	    <variablelist>
	      <varlistentry>
	        <term><code>const <link
	        linkend="Class-FEMesh">FEMesh</link>* mesh</code></term>
	        <listitem>
		      <para>
		        The finite element mesh on which the
		        <classname>Flux</classname> is to be computed.
		      </para>
	        </listitem>
	      </varlistentry>
	      <varlistentry>
	        <term><code>const <link linkend="Class-Element">Element</link>*
	        element</code></term>
	        <listitem>
		      <para>
		        The element containing the point at which the
		        <classname>Flux</classname> is to be computed.
		      </para>
	        </listitem>
	      </varlistentry>
	      <varlistentry>
	        <term>
		      <code>
		        const <link
		        linkend="Class-MasterCoord">MasterPosition</link>&amp; pos
		      </code>
	        </term>
	        <listitem>
		      <para>
		        The position of the output point, specified as a point
		        in the element's master coordinate space.  Master
		        space coordinates can be converted to physical
		        coordinates by <link
		        linkend="Class-Element-from_master"><methodname>Element::from_master</methodname></link>.
		      </para>
	        </listitem>
	      </varlistentry>
	    </variablelist>
	  </para>
    </refsection>
  </refsection>               <!-- Flux Methods -->
</refentry>                   <!-- Flux -->

<refentry id="Class-VectorFlux">
  <refnamediv>
    <refname>VectorFlux</refname>
    <refpurpose>A vector-valued <classname>Flux</classname></refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <title>Synopses</title>
    <refsect2>
	  <title>C++ Synopsis</title>
	  <programlisting>
#include "engine/flux.h" </programlisting>
	  <classsynopsis language="cpp">
	    <ooclass>
	      <classname>VectorFlux</classname>
	    </ooclass>
	    <ooclass>
	      <modifier>public</modifier>
	      <classname><link linkend="Class-Flux">Flux</link></classname>
	    </ooclass>
        <methodsynopsis>
          <modifier>virtual</modifier>
          <type>FieldIndex*</type>
          <methodname><link linkend="Class-VectorFlux-getIndex">getIndex</link></methodname>
          <methodparam>
            <modifier>const</modifier>
            <type>std::string&amp;</type>
            <parameter>name</parameter>
          </methodparam>
          <modifier>const</modifier>
        </methodsynopsis>       <!--get Index-->
	  </classsynopsis>
    </refsect2>                 <!-- C++ Synopsis -->
    <refsect2>
	  <title>Python Synopsis</title>
	  <programlisting>
from ooflib.SWIG.engine.flux import VectorFlux </programlisting>
	  <classsynopsis language="python">
	    <ooclass>
	      <classname>VectorFlux</classname>
	    </ooclass>
	    <ooclass>
	      <classname><link linkend="Class-Flux">Flux</link></classname>
	    </ooclass>
	    <constructorsynopsis>
	      <methodparam>
	        <parameter>name</parameter>
	      </methodparam>
	    </constructorsynopsis>
        <methodsynopsis>
          <methodname><link linkend="Class-VectorFlux-getIndex">getIndex</link></methodname>
          <methodparam>
            <parameter>name</parameter>
          </methodparam>
        </methodsynopsis>
	  </classsynopsis>
    </refsect2>                 <!-- python synopsis -->
    <refsect2>
	  <title>Source Files</title>
	  <itemizedlist spacing="compact">
	    <listitem>
	      <simpara>
	        <filename>SRC/engine/flux.h</filename>: C++ headers
	      </simpara>
	    </listitem>
	    <listitem>
	      <simpara>
	        <filename>SRC/engine/flux.C</filename>: C++ source code
	      </simpara>
	    </listitem>
	    <listitem>
	      <simpara>
	        <filename>SRC/engine/flux.swg</filename>: SWIG source
	        code
	      </simpara>
	    </listitem>
	    <listitem>
	      <simpara>
	        <filename>SRC/engine/flux.spy</filename>: python code
	        included in <filename>flux.swg</filename>
	      </simpara>
	    </listitem>
	  </itemizedlist>
    </refsect2>
  </refsynopsisdiv>
  <refsection>
    <title>Description</title>
    <para>
	  <classname>VectorFlux</classname> is a &flux; whose value is a
	  three-vector, such as a heat current.  Like all
	  <classname>Fluxes</classname>, it should only be constructed in
	  Python. See <xref linkend="Section-Coding-AddFields"/>.
    </para>
  </refsection>
  <refsection>
    <title>Methods</title>
    <para>
	  Most of the <classname>VectorFlux</classname> methods are
	  inherited from and documented in its base class, <link
	  linkend="Class-Flux"><classname>Flux</classname></link>.
    </para>
    <refsection id="Class-VectorFlux-getIndex">
      <title>
      <code>FieldIndex *getIndex(const std::string&amp; name) const</code>
      </title>
      <para>
        <code>VectorFlux::getIndex</code> returns a pointer to a <link
        linkend="Class-VectorFieldIndex"><classname>VectorFieldIndex</classname></link>.
        The <varname>name</varname> argument can be
        <userinput>"x"</userinput>, <userinput>"y"</userinput>, or
        <userinput>"z"</userinput>.
      </para>
    </refsection>
  </refsection>
</refentry>                     <!-- Class:Flux:VectorFlux -->

<refentry id="Class-SymmetricTensorFlux">
  <refnamediv>
    <refname>SymmetricTensorFlux</refname>
    <refpurpose>A 3&times;3 symmetric tensor valued <classname>Flux</classname></refpurpose>
  </refnamediv>
   <refsynopsisdiv>
    <title>Synopses</title>
    <refsect2>
	  <title>C++ Synopsis</title>
	  <programlisting>
#include "engine/flux.h" </programlisting>
	  <classsynopsis language="cpp">
	    <ooclass>
	      <classname>SymmetricTensorFlux</classname>
	    </ooclass>
	    <ooclass>
	      <modifier>public</modifier>
	      <classname><link linkend="Class-Flux">Flux</link></classname>
	    </ooclass>
        <methodsynopsis>
          <modifier>virtual</modifier>
          <type>FieldIndex*</type>
          <methodname><link linkend="Class-SymTenFlux-getIndex">getIndex</link></methodname>
          <methodparam>
            <modifier>const</modifier>
            <type>std::string&amp;</type>
            <parameter>name</parameter>
          </methodparam>
          <modifier>const</modifier>
        </methodsynopsis>       <!--get Index-->
        
	  </classsynopsis>
    </refsect2>                 <!-- C++ Synopsis -->
    <refsect2>
	  <title>Python Synopsis</title>
	  <programlisting>
from ooflib.SWIG.engine.flux import SymmetricTensorFlux </programlisting>
	  <classsynopsis language="python">
	    <ooclass>
	      <classname>SymmetricTensorFlux</classname>
	    </ooclass>
	    <ooclass>
	      <classname><link linkend="Class-Flux">Flux</link></classname>
	    </ooclass>
	    <constructorsynopsis>
	      <methodparam>
	        <parameter>name</parameter>
	      </methodparam>
	    </constructorsynopsis>
        <methodsynopsis>
          <methodname><link linkend="Class-SymTenFlux-getIndex">getIndex</link></methodname>
          <methodparam>
            <parameter>name</parameter>
          </methodparam>
        </methodsynopsis>
	  </classsynopsis>
    </refsect2>                 <!-- python synopsis -->
    <refsect2>
	  <title>Source Files</title>
	  <itemizedlist spacing="compact">
	    <listitem>
	      <simpara>
	        <filename>SRC/engine/flux.h</filename>: C++ headers
	      </simpara>
	    </listitem>
	    <listitem>
	      <simpara>
	        <filename>SRC/engine/flux.C</filename>: C++ source code
	      </simpara>
	    </listitem>
	    <listitem>
	      <simpara>
	        <filename>SRC/engine/flux.swg</filename>: SWIG source
	        code
	      </simpara>
	    </listitem>
	    <listitem>
	      <simpara>
	        <filename>SRC/engine/flux.spy</filename>: python code
	        included in <filename>flux.swg</filename>
	      </simpara>
	    </listitem>
	  </itemizedlist>
    </refsect2>
  </refsynopsisdiv>
  <refsection>
    <title>Description</title>
	<para>
	  <classname>SymmetricTensorFlux</classname> is a &flux; whose value is
	  a 3&times;3 symmetric tensor, such as stress.  Like all
	  <classname>Fluxes</classname>, it should only be constructed
	  in Python. See <xref linkend="Section-Coding-AddFields"/>.
	</para>
  </refsection>
  <refsection>
    <title>Methods</title>
    <para>
	  Most of the <classname>SymmetricTensorFlux</classname> methods
	  are inherited from and documented in its base class, <link
	  linkend="Class-Flux"><classname>Flux</classname></link>.
    </para>
    <refsection id="Class-SymTenFlux-getIndex">
      <title>
        <code>FieldIndex *getIndex(const std::string &amp;name) const</code>
      </title>
      <para>
        <code>SymmetricTensorFlux::getIndex</code> returns a pointer
        to a <link
        linkend="Class-SymTensorIndex"><classname>SymTensorIndex</classname></link>.
        The <varname>name</varname> argument is two letters, each of
        which is <userinput>"x"</userinput>,
        <userinput>"y"</userinput>, or <userinput>"z"</userinput>.  
      </para>
    </refsection>
  </refsection>                <!-- Methods -->
</refentry>                  <!-- Class:Flux:SymmetricTensorFlux -->

  <!-- Keep this comment at the end of the file
  Local variables:
  sgml-omittag:t
  sgml-shorttag:t 
  sgml-namecase-general:nil
  sgml-minimize-attributes:nil
  sgml-always-quote-attributes:t
  sgml-indent-step:2
  sgml-indent-data:t
  sgml-parent-document:("../man_oof2.xml" "book" "chapter")
  sgml-exposed-tags:nil
  sgml-local-ecat-files:nil
  End:
-->
