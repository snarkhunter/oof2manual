<!--
  This software was produced by NIST, an agency of the
  U.S. government, and by statute is not subject to copyright in the
  United States.  Recipients of this software assume all
  responsibilities associated with its operation, modification and
  maintenance. However, to facilitate maintenance we ask that before
  distributing modified versions of this software, you first contact
  the authors at oof_manager@nist.gov.
-->

<para>
  <classname>Smooth</classname> moves &nodes; to the
  <emphasis>average</emphasis> positions of their neighbors in order
  to smooth out gradients in &node; density in a &skel;.  &nodes; are
  moved one by one in random order.
</para>

<para>
  Typically, it takes about 3 to 5 iterations of
  <classname>Smooth</classname> to get a good result. The procedure
  for a single iteration is:

  <orderedlist>
    <listitem>
	  <para>
	    Collect <link
	    linkend="RegisteredClass-FiddleNodesTargets">target
	    nodes</link> according to the given <varname>targets</varname>
	    parameter.  The collected &nodes; are re-ordered randomly to
	    avoid possible artifacts due to the original ordering of
	    &nodes;.  This re-ordering is repeated at every iteration.
	  </para>
    </listitem>
    <listitem id="smoothloop">
	  <para>
	    Give a &node; a single chance to move to the average position
	    of its neighbors.  For this purpose,
	    <emphasis>neighbors</emphasis> are defined as &nodes; that
	    share a &sgmt; with the &node; being moved.
	  </para>
	  <para>
	    <xref linkend="Figure-smooth_schematics"/>(a) shows a &node;
	    (the red dot) that is about to move to the average position
	    of its neighbors (the green dots).
	  </para>
    </listitem>
    <listitem>
	  <para>
	    Accept the &node; move only if it satisfies the specified
	    <link
	    linkend="RegisteredClass-SkelModCriterion"><varname>acceptance
	    criterion</varname></link>.  Moved &nodes; that fail to meet
	    the criterion will spring back to their original positions, as
	    shown in <xref linkend="Figure-anneal_schematics"/>(b).
	  </para>
    </listitem>
    <listitem>
	  <para>
	    If the move is unacceptable according to the acceptance
	    <varname>criterion</varname>, &oof2; may still accept the move
	    if the smoothing is being done at a non-zero
	    <emphasis>temperature</emphasis>.  The parameter
	    <varname>T</varname> sets the effective temperature of the
	    annealing process.  Unacceptable moves are accepted with a
	    probability
	    <equation>
	      <alt role="tex">
	        \[P = \exp{(-E_\mathrm{diff}/T)}\]
	      </alt>
	    </equation>
	    where 	  
	    <inlineequation>
	      <alt role="tex">\(E_\mathrm{diff}\)</alt>
	      </inlineequation> is the difference between
	      the effective energies of the new and old &elem; configurations.
	  </para>
    </listitem>
    <listitem>
      <para>
        Return to step <xref linkend="smoothloop"/> until all of the
        &nodes; in the list have been examined.
      </para>
    </listitem>
  </orderedlist>
  
  <figure id="Figure-smooth_schematics">
    <title>Schematics of Smooth</title>
    <mediaobject>
	  <imageobject>
	    <imagedata format="PNG" fileref="FIGURES/smooth/schematic.png"/>
	  </imageobject>
	  <imageobject>
	    <imagedata format="EPS" fileref="FIGURES/smooth/schematic.eps"/>
	  </imageobject>
	  <caption>
	    <para>
	      (a) A node (red dot) moves to the average position (black
	      dot) of its four neighboring nodes (green dots). The move is
	      affecting the four neighboring elements (yellow).  (b) The
	      node has moved to the average position. If the move doesn't
	      satisfy the given <varname>criterion</varname> (computed on
	      the four affected elements), it will move back to its
	      original position.
	    </para>
	  </caption>
    </mediaobject>
  </figure>
</para>

<para>
  Smoothing usually converges quickly and each iteration is not very
  expensive, so it's reasonable to perform a fixed small number of
  iterations, for example by setting <code>iterations=<link
  linkend="RegisteredClass-FixedIterations">FixedIterations</link>(iterations=5)</code>.
  It is also possible to use <link
  linkend="RegisteredClass-ConditionalIteration">conditional
  iteration</link>, which can repeatedly smooth the &skel; until the
  <link linkend="RegisteredClass-ReductionRate">energy drop</link> or
  <link linkend="RegisteredClass-AcceptanceRate">acceptance
  rate</link> per iteration becomes too small.
</para>

<para>
  <xref linkend="Figure-smooth"/> shows a quadrilteral &skel; that has
  been <link linkend="RegisteredClass-Refine">refined</link> twice by
  <link linkend="RegisteredClass-Bisection">bisection</link> of the
  inhomogeneous &elems;, and the result of smoothing it. <xref
  linkend="Figure-smooth2"/> compares ways of preserving &elem;
  homogeneity while smoothing.
</para>

<figure id="Figure-smooth">
  <title>Smoothing a Skeleton</title>
  <mediaobject>
	<imageobject>
	  <imagedata format="PNG" fileref="FIGURES/smooth/smoothed.png"/>
	</imageobject>
	<caption>
	  <para>
	   (a) A &micro; and &skel;.  The &skel; has been refined twice by
	   bisection. (b) The result of smoothing the &skel; with
	   <code>Smooth(targets=AllNodes(),criterion=AverageEnergy(alpha=0.3),T=0,iteration=FixedIteration(iterations=5))</code>.
	   Because <varname>alpha</varname> is small,
	   <classname>Smooth</classname> produced well shaped but
	   inhomogeneous &elems;.
	  </para>
	</caption>
  </mediaobject>
</figure>


<figure id="Figure-smooth2">
  <title>Smoothing without Losing Homogeneity</title>
  <mediaobject>
    <imageobject>
      <imagedata format="PNG" fileref="FIGURES/smooth/snaprefinedsmoothed.png"/>
    </imageobject>
    <caption>
      <para>
        (a) A &skel; created by <link
        linkend="RegisteredClass-Refine">refining</link> the &skel; in
        <xref linkend="Figure-smooth"/>(a) at <xref
        linkend="RegisteredClass-TransitionPoints"/> and <link
        linkend="RegisteredClass-Rationalize">rationalizing</link> it
        three times.  Its <link
        linkend="Section-Concepts-Skeleton-Homogeneity">homogeneity
        index</link> is 0.9946, meaning that only 0.54% of the &micro;
        is misrepresented by the &skel;.  The <link
        linkend="Section-Concepts-Skeleton-Shape_Energy">shape
        energy</link> of the &elem; highlighted in red is 0.40.
      </para>
      <para>
        (b) For comparison, this shows the &skel; in (a) after
        smoothing with <code>alpha=0.3</code> for 5 iterations, the
        same operation used in <xref linkend="Figure-smooth"/>.  Many
        &elems; have become <emphasis>less</emphasis> homogeneous
        &emdash; 1.08% of the &micro; is misrepresented, twice what it
        was in (a) &emdash; but shapes have improved.  The shape
        energy of the red element has decreased to 0.13.
      </para>
      <para>
        (c) The &skel; in (a) after smoothing with
        <code>alpha=1.0</code> for 5 iterations.  Smoothing has
        improved element shapes away from the boundaries, but not very
        much near them (the shape energy of the red &elem; has
        increased slightly to 0.54).  Smoothing did not reduce
        homogeneity.  &nodes; that were on pixel boundaries are still
        on pixel boundaries, and only 0.45% of the &micro; is
        misrepresented.
      </para>
      <para>
        (d) The &skel; in (a) after <link
        linkend="Section-Tasks-PinNodes">pinning</link> the &nodes;
        that lie on its <link
        linkend="MenuItem-OOF.Skeleton.PinNodes.Pin_Internal_Boundary_Nodes">internal
        boundaries</link> and then smoothing it with
        <code>alpha=0.3</code> for 5 iterations.  The red &elem;'s
        shape energy is not very good, 0.53, but in general the shapes
        of the &elems; in the less constrained yellow and orange
        regions have improved over (a).  The misrepresented fraction
        is 0.54%, the same as it was in (a), which is not surprising
        because none of the &nodes; on the boundaries have moved.
      </para>
    </caption>
  </mediaobject>
</figure>


<para>
  Statistics for each step of the smoothing process are printed in the
  &oof2; <link linkend="Section-Windows-Messages">Message</link>
  window.  For example, here is the output from creating <xref
  linkend="Figure-smooth2"/>(b):
  <literallayout class="monospaced">
    Iteration 1: E = 4.7648e+01, deltaE=-3.4691e+00 ( 7.281%), Acceptance Rate = 67.2%
    Iteration 2: E = 3.1804e+01, deltaE=-7.5127e-01 ( 2.362%), Acceptance Rate = 45.5%
    Iteration 3: E = 2.8475e+01, deltaE=-2.5280e-01 ( 0.888%), Acceptance Rate = 24.9%
    Iteration 4: E = 2.7365e+01, deltaE=-4.0957e-02 ( 0.150%), Acceptance Rate = 11.1%
    Iteration 5: E = 2.7201e+01, deltaE=-7.4279e-03 ( 0.027%), Acceptance Rate =  7.9%
    Smoothing done:  deltaE = -2.0476e+01 (42.975%) </literallayout>
  The listing shows the iteration number, the total <link
  linkend="Section-Concepts-Skeleton-Energy">energy</link>
  (<computeroutput>E</computeroutput>) of the &skel;, the absolute
  change in energy (<computeroutput>deltaE</computeroutput>) during
  the iteration, the percentage change in energy, and the move <link
  linkend="RegisteredClass-AcceptanceRate">acceptance rate</link>.  If
  the change in energy or the acceptance rate gets too small, the
  smoothing process is not being effective at improving the &skel;.
  Notice that the energy change per step is decreasing exponentially,
  indicating rapid convergence.
</para>

  <!-- Keep this comment at the end of the file
  Local variables:
  sgml-omittag:t
  sgml-shorttag:t 
  sgml-namecase-general:nil
  sgml-minimize-attributes:nil
  sgml-always-quote-attributes:t
  sgml-indent-step:2
  sgml-indent-data:t
  sgml-parent-document:("../../../man_oof2.xml" "book" "chapter" "refentry" "refsect1")
  sgml-exposed-tags:nil
  sgml-local-ecat-files:nil
  End:
  -->
