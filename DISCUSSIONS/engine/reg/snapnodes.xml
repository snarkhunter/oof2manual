<!-- 
  This software was produced by NIST, an agency of the
  U.S. government, and by statute is not subject to copyright in the
  United States.  Recipients of this software assume all
  responsibilities associated with its operation, modification and
  maintenance. However, to facilitate maintenance we ask that before
  distributing modified versions of this software, you first contact
  the authors at oof_manager@ctcms.nist.gov.
-->

<para>
  <classname>SnapNodes</classname> moves &nodes; to improve the
  &elems;' <xref linkend="Section-Concepts-Skeleton-Homog_Energy"/>.
  If an &elem; edge crosses over regions of the &micro; belonging to
  different pixel <link
  linkend="Section-Concepts-PixelCategory">categories</link>, then
  <classname>SnapNodes</classname> tries to move one of the &elem;
  corners to the crossing point.  These points are called
  <quote>transition points</quote>, and are illustrated in <xref
  linkend="Figure-transition"/>.  See <xref
  linkend='Section-Concepts-Skeleton-Segment'/> for more on transition
  points and how they're detected.
</para>
<figure id="Figure-transition">
  <title>Transition Points</title>
  <mediaobject>
    <imageobject>
	  <imagedata format="PNG" fileref="FIGURES/transition.png"></imagedata>
    </imageobject>
    <imageobject>
	  <imagedata format="EPS" fileref="FIGURES/transition.eps"></imagedata>
    </imageobject>
    <caption>
	  <para>
	    The &elem; in the middle has two transition points (marked
	    with an X) where the &sgmts; cross from the green to the
	    magenta pixels.
	  </para>
    </caption>
  </mediaobject>
</figure>
<para>
  The general procedure for snapping &nodes; is as follows.
  <orderedlist numeration="arabic">
    <listitem>
	  <para>
	    Scan the current &skel; to find candidate &nodes; for
	    snapping.  The candidates are identified by the
	    <varname>targets</varname> parameter.
	  </para>
    </listitem>
    <listitem>
      <para>
        Loop over candidate nodes, <emphasis>N</emphasis>.
        <orderedlist numeration="loweralpha">
          <listitem>
            <para>
              Loop over the candidates neighbor nodes, <emphasis>M</emphasis>.
            </para>
          </listitem>
          <listitem>
            <para>
              If the segment <emphasis>NM</emphasis> hasn't been
              looked at already, try moving each node, or both at
              once, to all the transition points on any of their
              &sgmts;.  Pick the combination move that best satisfies
              the specified acceptance <varname>criterion</varname>.
            </para>
          </listitem>
          <listitem>
            <para>
              Remove node <emphasis>NM</emphasis> from the list of
              candidate nodes.
              Move node <emphasis>M</emphasis> to the top of the list,
              so that it's examined next in the outer loop.
            </para>
          </listitem>
        </orderedlist>
      </para>
    </listitem>
  </orderedlist>
</para>


<para>
  Here's a simple example of snapping nodes of heterogeneous elements.
  <xref linkend="Figure-before_snap"/> shows a &skel; that features
  some heterogeneous elements.  The resulting &skel; (after applying
  <classname>SnapNodes</classname> with <code>targets=<link
  linkend="RegisteredClass-SnapAll">SnapAl</link>l()</code> and
  <code>criterion=<link
  linkend="RegisteredClass-AverageEnergy">AverageEnergy</link>(alpha=1)</code>
  is shown in <xref linkend="Figure-after_snap"/>.  Some, but not all,
  of the material boundaries have been resolved nicely.  It won't be
  possible to do much better than this with SnapNodes alone.
</para>

<figure id="Figure-before_snap">
  <title>Before Snapping Nodes</title>
  <mediaobject>
    <imageobject>
	  <imagedata format="PNG" fileref="FIGURES/snapshot/unsnapped.png"/>
    </imageobject>
    <caption>
	  <para>
	    A &skel; with heterogeneous &elems;.
	  </para>
    </caption>
  </mediaobject>
</figure>
<figure id="Figure-after_snap">
  <title>After Snapping Nodes with <varname>alpha</varname>=0.85</title>
  <mediaobject>
    <imageobject>
	  <imagedata format="PNG" fileref="FIGURES/snapshot/snapped.png"/>
    </imageobject>
    <caption>
	  <para>
	    After snapping nodes. In many places the element boundaries
	    now follow the pixel boundaries.
	  </para>
    </caption>
  </mediaobject>
</figure>

<para>
  Snapping &nodes; (like all &skel; modifications) tends to produce
  badly-shaped elements when done with large values of
  <varname>alpha</varname>.  <xref linkend="Figure-oversnapped"/>
  shows what happens if <varname>alpha</varname> is increased to 0.9
  in the previous operation. The element edges follow the lower right
  part of the blue region and the upper left part of the red region
  much more closely.  However there are now some very badly shaped
  elements, marked in green in the figure.  The upper two triangles
  are really quadrilaterals with a very short side where they join,
  and the lower triangle is really a quadrilateral with a nearly
  180&deg; angle at one node.
</para>
<para>
  However, <classname>SnapNodes</classname> is really a homogeneity
  oriented operation, and works best when given a large
  <varname>alpha</varname>.  It can be useful to allow it to create
  badly shaped &elems;, and to clean up afterwards by applying the
  <xref linkend="RegisteredClass-Rationalize"/> <link
  linkend="MenuItem-OOF.Skeleton.Modify">Skeleton modifier</link>.  In
  this case, <xref linkend="RegisteredClass-Rationalize"/> will merge
  nodes to convert the &elems; with short edges into triangles, and
  will subdivide the wide angled quadrilaterals into two triangles.
  The two very inhomogeneous &elems; in the upper right could be fixed
  by <xref linkend="RegisteredClass-SplitQuads"/>.
</para>
<figure id="Figure-oversnapped">
  <title>After Snapping Nodes with <varname>alpha</varname>=0.9</title>
  <mediaobject>
    <imageobject>
	  <imagedata fileref="FIGURES/snapshot/oversnapped.png" format="PNG"/>
    </imageobject>
    <caption>
      <para>
        Snapping nodes with a large <varname>alpha</varname> leads to
        badly shaped but more homogenous elements that follow the
        material boundaries better.
      </para>
    </caption>
  </mediaobject>
</figure>

  <!-- Keep this comment at the end of the file
  Local variables:
  sgml-omittag:t
  sgml-shorttag:t 
  sgml-namecase-general:nil
  sgml-minimize-attributes:nil
  sgml-always-quote-attributes:t
  sgml-indent-step:2
  sgml-indent-data:t
  sgml-parent-document:("../../man_oof2.xml" "book" "chapter" "refentry" "refsect1")
  sgml-exposed-tags:nil
  sgml-local-ecat-files:nil
  End:
  -->
