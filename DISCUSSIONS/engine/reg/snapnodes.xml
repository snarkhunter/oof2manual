<!-- 
  This software was produced by NIST, an agency of the
  U.S. government, and by statute is not subject to copyright in the
  United States.  Recipients of this software assume all
  responsibilities associated with its operation, modification and
  maintenance. However, to facilitate maintenance we ask that before
  distributing modified versions of this software, you first contact
  the authors at oof_manager@nist.gov.
-->

<para>
  <classname>SnapNodes</classname> moves &nodes; to improve the
  &elems;' <xref linkend="Section-Concepts-Skeleton-Homog_Energy"/>.
  If an &elem; edge crosses over regions of the &micro; belonging to
  different pixel <link
  linkend="Section-Concepts-PixelCategory">categories</link>, then
  <classname>SnapNodes</classname> tries to move one of the &elem;
  corners to the crossing point.  These points are called
  <quote>transition points</quote>, and are illustrated in <xref
  linkend="Figure-transition"/>.  See <xref
  linkend='Section-Concepts-Skeleton-Segment'/> for more on transition
  points and how they're detected.
</para>
<figure id="Figure-transition">
  <title>Transition Points</title>
  <mediaobject>
    <imageobject>
	  <imagedata format="PNG" fileref="FIGURES/snapnodes/transition.png"></imagedata>
    </imageobject>
    <caption>
	  <para>
	    The central &elem; has two transition points (marked with
	    circles) where the &sgmts; cross from the blue to the white
	    pixels.
	  </para>
    </caption>
  </mediaobject>
</figure>
<para>
  The general procedure for snapping &nodes; is as follows.
  <orderedlist numeration="arabic">
    <listitem>
	  <para>
	    Scan the current &skel; and build a list of candidate &nodes;
	    for snapping.  The candidates are identified by the
	    <varname>targets</varname> parameter.  Randomize the list.
	  </para>
    </listitem>
    <listitem id="nloop">
      <para>
        Loop over candidate nodes, <emphasis>N</emphasis>.
        <orderedlist numeration="loweralpha">
          <listitem>
            <para>
              Loop over the candidate's neighbor nodes, <emphasis>M</emphasis>.
            </para>
          </listitem>
          <listitem>
            <para>
              If the segment <emphasis>NM</emphasis> hasn't been
              examined already, try moving each node, or both at once,
              to all the transition points on any of their &sgmts;.
              Pick the combination move that best satisfies the
              specified acceptance <varname>criterion</varname>.
            </para>
          </listitem>
          <listitem>
            <para>
              Remove node <emphasis>N</emphasis> from the list of
              candidate nodes.  Move node <emphasis>M</emphasis> to
              the top of the list, so that it's examined next.
            </para>
          </listitem>
          <listitem>
            <para>
              Go back to step <xref linkend="nloop"/> until the list
              is empty.
            </para>
          </listitem>
        </orderedlist>
      </para>
    </listitem>
  </orderedlist>
</para>


<para>
  <xref linkend="Figure-snap"/> shows a &skel; that features some
  heterogeneous elements and the result of applying
  <classname>SnapNodes</classname> with <code>targets=<link
  linkend="RegisteredClass-SnapAll">SnapAll</link>()</code> and
  <code>criterion=<link
  linkend="RegisteredClass-AverageEnergy">AverageEnergy</link>(alpha=0.85)</code>
  to it.  Some, but not all, of the material boundaries have been
  resolved nicely.
</para>

<figure id="Figure-snap">
  <title>Snapping Nodes</title>
  <mediaobject>
    <imageobject>
	  <imagedata format="PNG" fileref="FIGURES/snapnodes/snapnodes.png"/>
    </imageobject>
    <caption>
	  <para>
	    A &skel; with heterogeneous &elems;, on the left, and the
	    result of applying <classname>SnapNodes</classname> with
	    <code>alpha=0.85</code>, on the right.  In many places the
	    element boundaries now follow the pixel boundaries.
	  </para>
    </caption>
  </mediaobject>
</figure>

<para>
  Snapping &nodes; (like all &skel; modifications) tends to produce
  badly-shaped elements when done with large values of
  <varname>alpha</varname>.  The image on the left in <xref
  linkend="Figure-oversnapped"/> shows what happens if
  <varname>alpha</varname> is increased to 0.9 in the previous
  operation. The element edges follow the upper-right part of the blue
  region and the upper-left part of the red region much more closely.
  However the &elems; marked in green and labeled
  <quote>Degenerate</quote> are very badly shaped.  They appear to be
  triangles, but the upper two are quadrilaterals with a very short
  side where they join, and the lower one is actually a quadrilateral
  with a nearly 180&deg; angle at one node.  The first two have <link
  linkend="Section-Concepts-Skeleton-Shape_Energy">shape
  energies</link> of 0.99, and the third's is 0.93.
</para>
<para>
  The two &elems; marked in green and labeled
  <quote>Inhomogeneous</quote> in <xref linkend="Figure-oversnapped"/>
  illustrate a configuration that is impossible to improve with
  <classname>SnapNodes</classname> alone.  It's not possible to fix
  these &elems; just by moving &nodes;.
</para>
<para>
  However, it can be useful to allow <classname>SnapNodes</classname>
  to create badly shaped &elems;, and to clean up afterwards by
  applying other tools.  The right hand &skel; in <xref
  linkend="Figure-oversnapped"/> shows the result of applying <xref
  linkend="RegisteredClass-Rationalize"/> and <xref
  linkend="RegisteredClass-SplitQuads"/> to the problem &elems; on the
  left.  These tools can often fix messes left behind by
  <classname>SnapNodes</classname>.
</para>

<figure id="Figure-oversnapped">
  <title>Snapping Nodes with a Large <varname>alpha</varname></title>
  <mediaobject>
    <imageobject>
	  <imagedata fileref="FIGURES/snapnodes/oversnapped.png" format="PNG"/>
    </imageobject>
    <caption>
      <para>
        The &skel; on the left is the result of using
        <classname>SnapNodes</classname> with a large
        <varname>alpha</varname>, which has produced some badly shaped
        &elems; and failed to make all of the rest homogeneous.  The
        &skel; on the right is the result of applying <xref
        linkend="RegisteredClass-Rationalize"/> and <xref
        linkend="RegisteredClass-SplitQuads"/> to the &skel; on the
        left.  The degenerate quadrilaterals have been converted to
        triangles by merging nodes (although that's not obvious in the
        image) and splitting the obtuse angle.  The inhomogeneous
        quads have each been split into two homogeneous triangles.
      </para>
    </caption>
  </mediaobject>
</figure>

  <!-- Keep this comment at the end of the file
  Local variables:
  sgml-omittag:t
  sgml-shorttag:t 
  sgml-namecase-general:nil
  sgml-minimize-attributes:nil
  sgml-always-quote-attributes:t
  sgml-indent-step:2
  sgml-indent-data:t
  sgml-parent-document:("../../man_oof2.xml" "book" "chapter" "refentry" "refsect1")
  sgml-exposed-tags:nil
  sgml-local-ecat-files:nil
  End:
  -->
