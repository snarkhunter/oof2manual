<!-- 
  This software was produced by NIST, an agency of the
  U.S. government, and by statute is not subject to copyright in the
  United States.  Recipients of this software assume all
  responsibilities associated with its operation, modification and
  maintenance. However, to facilitate maintenance we ask that before
  distributing modified versions of this software, you first contact
  the authors at oof_manager@nist.gov.
-->

<para>
  <classname>Newton</classname> is a <link
  linkend="RegisteredClass-NonlinearSolverBase">nonlinear
  solver</link> used in <xref
  linkend="RegisteredClass-AdvancedSolverMode"/> for solving nonlinear
  equations of the form
  <equation id="Eqn-Newton0">
    <alt role="tex">
      \[ A(\phi) = 0 \]
    </alt>
  </equation>
  It implements <ulink
  url="http://en.wikipedia.org/wiki/Newtons_method"
  role="external">Newton's method</ulink>, which uses the derivative
  of the nonlinear term <inlineequation><alt
  role="tex">\(A\)</alt></inlineequation> with respect to the vector
  of unknowns, <inlineequation><alt
  role="tex">\(\phi\)</alt></inlineequation>
  (<foreignphrase>i.e,</foreignphrase> &field; values), to compute
  successive approximations to the solution.  The iteration stops when
  the norm of the residual after the
  <inlineequation>
    <alt role="tex">
      \( n^\mathrm{th} \)
    </alt>
  </inlineequation>
  step,
  <inlineequation>
    <alt role="tex">
      \( \left|A_n\right| \)
    </alt>
  </inlineequation>, satisfies

  <equation>
    <alt role="tex">
      \[ |A_n| &lt; \epsilon |A_0| + \delta \]
    </alt>
  </equation>

  where <inlineequation><alt
  role="tex">\(\epsilon\)</alt></inlineequation>=<varname>relative_tolerance</varname>
  and <inlineequation><alt
  role="tex">\(\delta\)</alt></inlineequation>=<varname>absolute_tolerance</varname>,
  or when the <varname>maximum_iterations</varname> limit is exceeded.
</para>
<para>
  Newton's method generally converges in fewer iterations than <xref
  linkend="RegisteredClass-Picard"/>, but may require more work per
  iteration.
</para>
<para>
  Newton's method relies upon knowing the Jacobian, which is the
  derivatives of the nonlinear function with respect to the unknowns,
  <inlineequation>
    <alt role="tex">
      \( \partial A_i(\phi)/\partial \phi_j \)
    </alt>
  </inlineequation>.  This information comes from the &material;
  &properties;, which determine the exact form of the equations being
  solved.  <link
  linkend="Class-EqnProperty"><classname>EqnProperties</classname></link>
  must define <link
  linkend="Class-EqnProperty-force_deriv_matrix"><code>EqnProperty::force_deriv_matrix()</code></link>
  to compute this quantity.  <link
  linkend="Class-FluxProperty"><classname>FluxProperties</classname></link>
  must define <link
  linkend="Class-FluxProperty-flux_matrix"><code>FluxProperty::flux_matrix</code></link>.
</para>

  <!-- Keep this comment at the end of the file
  Local variables:
  sgml-omittag:t
  sgml-shorttag:t 
  sgml-namecase-general:nil
  sgml-minimize-attributes:nil
  sgml-always-quote-attributes:t
  sgml-indent-step:2
  sgml-indent-data:t
  sgml-parent-document:("../../../man_oof2.xml" "book" "chapter" "refentry" "refsect1")
  sgml-exposed-tags:nil
  sgml-local-ecat-files:nil
  End:
  -->
