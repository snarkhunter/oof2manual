<!--
  This software was produced by NIST, an agency of the
  U.S. government, and by statute is not subject to copyright in the
  United States.  Recipients of this software assume all
  responsibilities associated with its operation, modification and
  maintenance. However, to facilitate maintenance we ask that before
  distributing modified versions of this software, you first contact
  the authors at oof_manager@nist.gov.
-->

<refentry id="Class-PhysicalProperty">
  <refnamediv>
    <refname>PhysicalProperty</refname>
    <refpurpose>
      Intermediate base class for <xref linkend="Class-FluxProperty"/>
      and <xref linkend="Class-EqnProperty"/>
    </refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <title>Synopses</title>
    <para>
      Extension &Properties; derived from <classname><xref
      linkend="Class-FluxProperty"/></classname> or <classname><xref
      linkend="Class-EqnProperty"/></classname> must redefine <link
      linkend="Class-PhysicalProperty-integration_order"><function>integration_order()</function></link>,
      in either C++ or Python.  This is the only method in the
      &Property; class hierarchy that <emphasis>must</emphasis> be
      redefined in subclasses.
    </para>
    <refsect2>
      <title>C++ Synopsis</title>
      <programlisting>
#include "engine/property.h"</programlisting>

      <classsynopsis language="cpp">
        <ooclass>
          <classname>PhysicalProperty</classname>
        </ooclass>
        <ooclass>
          <modifier>public</modifier>
          <classname><xref linkend="Class-Property"/></classname>
        </ooclass>
        <methodsynopsis>
          <modifier>virtual</modifier>
          <type>int</type>
          <methodname><link linkend="Class-PhysicalProperty-integration_order">integration_order</link></methodname>
          <methodparam>
            <modifier>const</modifier>
            <type>CSubProblem*</type>
            <parameter>subproblem</parameter>
          </methodparam>
          <methodparam>
            <modifier>const</modifier>
            <type>Element*</type>
            <parameter>element</parameter>
          </methodparam>
          <modifier>const</modifier>
        </methodsynopsis>
      </classsynopsis>

      <refsect3 id="Class-PhysicalProperty-subclasses">
        <title>C++ Derived Classes</title>
        <itemizedlist spacing="compact">
          <listitem>
            <simpara>
              <classname><xref linkend="Class-FluxProperty"/></classname>
            </simpara>
          </listitem>
          <listitem>
            <simpara>
              <classname><xref linkend="Class-EqnProperty"/></classname>
            </simpara>
          </listitem>
        </itemizedlist>
      </refsect3>               <!-- Derived classes -->
      <refsect3>
        <title>C++ Source Files</title>
        <itemizedlist spacing="compact">
          <listitem>
            <simpara>
              <filename>SRC/engine/property.h</filename>: C++ header
            </simpara>
          </listitem>
          <listitem>
            <simpara>
              <filename>SRC/engine/property.swg</filename>: SWIG source
              code
            </simpara>
          </listitem>
        </itemizedlist>
      </refsect3>               <!-- C++ Source files -->
    </refsect2>                 <!-- C++ Synopsis-->
    
    <refsect2>
      <title>Python Synopsis</title>
      <para>
        The Python classes <classname><xref
        linkend="Class-PyFluxProperty"/></classname> and
        <classname><xref linkend="Class-PyEqnProperty"/></classname>
        are derived from a C++ base class,
        <classname>PyPhysicalPropertyMethods</classname>.
        <classname>PyPhysicalPropertyMethods</classname> defines only
        one function, <methodname>integration_order()</methodname>,
        that can be redefined in a Python
        subclass.<footnote><simpara>As with <link
        linkend="Class-PyPropertyMethods"><classname>PyPropertyMethods</classname></link>,
        there is no actual Python version of this class.  But a class
        derived from <classname><xref
        linkend="Class-PyFluxProperty"/></classname> or
        <classname><xref linkend="Class-PyEqnProperty"/></classname>
        will act as if it's derived from
        <classname>PyPhysicalPropertyMethods</classname> in some
        ways.</simpara></footnote>
      </para>
      <programlisting>
from ooflib.SWIG.engine import pypropertywrapper </programlisting>
      <classsynopsis language="python">      
        <ooclass>
          <classname>PyPhysicalPropertyMethods</classname>
        </ooclass>
        <methodsynopsis>
          <methodname><link linkend="Class-PhysicalProperty-integration_order">integration_order</link></methodname>
          <methodparam>
            <parameter>subproblem</parameter>
          </methodparam>
          <methodparam>
            <parameter>element</parameter>
          </methodparam>
        </methodsynopsis>
      </classsynopsis>
      <refsect3>
        <title>Python Derived Classes</title>
        <itemizedlist spacing="compact">
          <listitem>
            <simpara>
              <classname><xref linkend="Class-PyFluxProperty"/></classname>
            </simpara>
          </listitem>
          <listitem>
            <simpara>
              <classname><xref linkend="Class-PyEqnProperty"/></classname>
            </simpara>
          </listitem>
        </itemizedlist>
      </refsect3>                 <!-- Derived classes -->
      <refsect3>
        <title>Source Files</title>
        <itemizedlist spacing="compact">
          <listitem>
            <simpara>
              <filename>SRC/engine/pypropertywrapper.C</filename>: C++
              code
            </simpara>
          </listitem>
          <listitem>
            <simpara>
              <filename>SRC/engine/pypropertywrapper.h</filename>: C++
              header
            </simpara>
          </listitem>
        </itemizedlist>
      </refsect3>               <!-- Python source files -->

    </refsect2>                 <!-- Python Synopsis -->
  </refsynopsisdiv>
  
  <refsection>
    <title>Overview</title>
    <para>
      <classname>PhysicalProperty</classname> is a subclass of
      &Property; and a base class of <link
      linkend="Class-FluxProperty"><classname>FluxProperty</classname></link>
      and <link
      linkend="Class-EqnProperty"><classname>EqnProperty</classname></link>,
      the classes that define the physics behavior of materials.
      Users should not derive new classes from
      <classname>PhysicalProperty</classname> directly.
    </para>
  </refsection>                 <!-- Overview -->
  <refsection>
    <title>Methods</title>
    <refsection id="Class-PhysicalProperty-integration_order">
	  <title>
        <code>int <emphasis role="bold">integration_order</emphasis>(const CSubProblem *subproblem, const Element
	    *element) const</code>
      </title>
      <para>
        When &oof2; converts an equation like <xref
        linkend="Eqn-Divergence"/> or <xref
        linkend="Eqn-TimeDivergence"/> to matrix form, it replaces the
        &fields; by an expansion in the &elem;'s <link
        linkend="Section-Concepts-Mesh-Geometry">shape
        functions</link>
        <inlineequation>
          <alt role="tex">
            \(N_i({\bf x})\)
          </alt>
        </inlineequation>,
        multiplies everything by a test function (which is another
        shape function,
        <inlineequation>
          <alt role="tex">
            \(N_j({\bf x})\)
          </alt>
          </inlineequation>),

        and then integrates over the entire mesh
        (<foreignphrase>i.e,</foreignphrase> over each element).
        Divergence terms are integrated by parts, which replaces the
        test function by its derivative.
      </para>
      <para>
        The integration over the elements is done by <ulink
        url="https://en.wikipedia.org/wiki/Gaussian_quadrature"
        role="external">Gaussian quadrature</ulink>.  To choose the
        appropriate number of Gauss points, it's necessary to know the
        polynomial degree of the integrand in <emphasis>x</emphasis>
        and <emphasis>y</emphasis>.  Generally, higher order
        polynomials require more points.  Choosing an integration
        order that is too large will slow down the calculation, but
        choosing one that is too small could lead to incorrect
        results.
      </para>
      <para>
        The method <function>integration_order()</function>, which
        must be defined in each
        <classname>PhysicalProperty</classname> class, returns the
        polynomial degree of the <classname>Property</classname>'s
        contribution to the integrand. That is, it depends on the
        <classname>Property</classname> <emphasis>before</emphasis>
        multiplying by the test function and integrating.  The degree
        depends on the details of the &Property; and on the polynomial
        degrees of the shape functions and their derivatives, which
        can be obtained from <link
        linkend="Class-Element-shapefun_degree"><function>Element::shapefun_degree()</function></link>
        and <link
        linkend="Class-Element-dshapefun_degree"><function>Element::dshapefun_degree()</function></link>.
      </para>
      <para>
        For example, a <classname>Property</classname> that adds a
        constant to the force term in <xref linkend="Eqn-Divergence"/>
        or <xref linkend="Eqn-TimeDivergence"/> has no dependence on
        the &Fields; and therefore has no shape functions in its
        expansion, so it has order <constant>0</constant>.  It should
        define <function>integration_order()</function> like this:
        
        <programlisting>
int ForceDensity::integration_order(const CSubProblem*, const Element*) const
{
  return <emphasis role="bold">0</emphasis>;
} </programlisting>

      </para>
      <para>
        Sometimes the polynomial order depends on whether the &Field;
        is <link linkend="Section-Concepts-Mesh-3D">in-plane</link> or
        <link linkend="Section-Concepts-Mesh-3D">out-of-plane</link>.
        Remember that &oof2; adds an auxiliary field,
        <equation>
          <alt role="tex">
            \[
            \psi({\bf x}) \equiv \frac{\partial\varphi({\bf x})}{\partial z}
            \]
          </alt>
        </equation>
        that contains the &texz;-derivative of &Fields; that are not
        in-plane.  The gradient of such a &Field; is

        <equation id="eqn-physicalpropgrad">
          <alt role="tex">
            \[
            \frac{\partial\varphi({\bf x})}{\partial\bf x}
            =
            \frac{\partial\varphi({\bf x})}{\partial x} {\hat{\bf x}} +
            \frac{\partial\varphi({\bf x})}{\partial y} {\hat{\bf y}} +
            \psi({\bf x}) {\hat{\bf z}}
            \]
          </alt>
        </equation>

        Both of the fields &varphi; and &psi; are expanded in shape
        functions
        <equation>
          <alt role="tex">
            \begin{align*}
            \varphi({\bf x}) &amp;= \sum_\nu N_\nu({\bf x}) \varphi_\nu  \\
            \psi({\bf x}) &amp;= \sum_\nu N_\nu({\bf x}) \psi_\nu \\
            \end{align*}
          </alt>
        </equation>
        so the gradient <xref linkend="eqn-physicalpropgrad"/> is
        <equation>
          <alt role="tex">
            \[
            \frac{\partial\varphi(x)}{\partial\bf x} =
            \sum_\nu \left[
            
            \frac{\partial N_\nu({\bf x})}{\partial x}
            \varphi_\nu {\hat{\bf x}}
            +
            \frac{\partial N_\nu({\bf x})}{\partial y}
            \varphi_\nu {\hat{\bf y}}
            +
            N_\nu({\bf x}) \psi_\nu {\hat{\bf x}}
            \right].
            \]
          </alt>
        </equation>
        
        Therefore if the &Field; is in-plane and &psi; is zero, the
        polynomial degree of the gradient is given by the derivative
        of the shapefunction, but if the &Field; is out-of-plane, the
        degree is the degree of the shapefunction itself, because the
        polynomial degree of a function is higher that the degree of
        its derivative.

      </para>
      <para>
        The result of all this is that a &Property; that depends on
        the gradient of a &Field; will need to check whether or not
        the &Field; is in-plane.  For example, here is the
        <function>integration_order()</function> method from
         <link
             linkend="PropertyType-Elasticity"><classname>Elasticity</classname></link>:

         <programlisting>
int Elasticity::integration_order(const CSubProblem *subp, const Element *el)
  const
{
  if(displacement->in_plane(subp)) <co id="integration_order_disp"/>
    return el-><emphasis role="bold">dshapefun_degree</emphasis>();
  return el-><emphasis role="bold">shapefun_degree</emphasis>();
 } </programlisting>

         <calloutlist>
           <callout arearefs="integration_order_disp">
             <para>
               <varname>displacement</varname> is a <link
               linkend="Class-TwoVectorField"><classname>TwoVectorField</classname>*</link>
               stored in the <classname>Elasticity</classname> class,
               and initialized in the
               <classname>Elasticity</classname> constructor like
               this:
               <programlisting>
displacement = dynamic_cast&lt;TwoVectorField*&gt;(<link linkend="Function-getField">Field::getField</link>("Displacement")); </programlisting>
             </para>
           </callout>
         </calloutlist>
         
      </para>
      
	  <warning>
	    <para>
	      Do <emphasis>not</emphasis> compute the shapefunction's
	      derivative's degree by subtracting 1 from the
	      shapefunction's degree.  For purposes of Gaussian
	      integration, the degree of the shapefunction is sometimes
	      less than its actual polynomial degree.  For example, the
	      linear quadrilateral shapefunction
          <inlineequation>
            <alt role="tex">
              \((1-x)(1-y)/4\)
            </alt>
          </inlineequation>
          for a 2&times;2 square centered on the origin
	      can be integrated exactly with a single Gauss point at
	      (0,0), although its polynomial degree is 2.  For this
	      function, both <function>shapefun_degree()</function> and
	      <function>dshapefun_degree()</function> return 1.
	  </para>
	</warning>
  </refsection>                 <!-- integration_order -->
  
    
  </refsection>                 <!-- Methods -->
</refentry>

<!-- Keep this comment at the end of the file
  Local variables:
  sgml-omittag:t
  sgml-shorttag:t 
  sgml-namecase-general:nil
  sgml-minimize-attributes:nil
  sgml-always-quote-attributes:t
  sgml-indent-step:2
  sgml-indent-data:t
  sgml-parent-document:("man_oof2.xml" "reference")
  sgml-exposed-tags:nil
  sgml-local-ecat-files:nil
  End:
-->
