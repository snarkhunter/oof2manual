<!-- 
  This software was produced by NIST, an agency of the
  U.S. government, and by statute is not subject to copyright in the
  United States.  Recipients of this software assume all
  responsibilities associated with its operation, modification and
  maintenance. However, to facilitate maintenance we ask that before
  distributing modified versions of this software, you first contact
  the authors at oof_manager@nist.gov.
-->

<para>
  The Backward Euler method is a method of numerically integrating
  ordinary differential equations.  Like the <xref
  linkend="RegisteredClass-ForwardEuler"/> method, it is first order
  in time, meaning that it makes an error of order
  <inlineequation><alt role="tex">\( (\Delta t)^2 \)
  </alt></inlineequation> on each step.  It is more stable than the
  Forward Euler method, especially for diffusion equations, but
  requires more effort to compute.  It is less accurate than <xref
  linkend="RegisteredClass-CrankNicolson"/>, but in some cases less
  prone to <ulink url="http://en.wikipedia.org/wiki/Crank_Nicolson"
  role="external">oscillations</ulink>.
</para>
<para>
  Given a vector <inlineequation><alt
  role="tex">\(\phi_n\)</alt></inlineequation> of unknowns
  (<foreignphrase>i.e.</foreignphrase> &field; values in &oof2;) at
  time <inlineequation><alt role="tex">\(t_n\)</alt></inlineequation>,
  and the first order differential equation
  <equation>
    <alt role="tex">
      \[ \frac{d\phi}{dt} = f(\phi, t) \]
    </alt>
  </equation>
  the Backward Euler solution is given by solving
  <equation>
    <alt role="tex"> 
      \[ \phi_{n+1} = \phi_n + \Delta t f(\phi_{n+1}, t_{n+1}) \]
    </alt>
  </equation>
  for <inlineequation><alt
  role="tex">\(\phi_{n+1}\)</alt></inlineequation>, with
  <inlineequation><alt role="tex">\( \Delta t = t_{n+1}-t_n
  \)</alt></inlineequation>.  Because <inlineequation><alt
  role="tex">\(\phi_{n+1}\)</alt></inlineequation> appears on the
  right hand side, this is an <emphasis>implicit</emphasis> method and
  is relatively costly to compute, especially when
  <inlineequation><alt role="tex">\(f\)</alt></inlineequation> is
  nonlinear.
 </para>
<para>
   <classname>BackwardEuler</classname> can be applied to equations
   with second order time derivatives via equation <xref
   linkend="Eqn-Augmented"/>.
</para>

  <!-- Keep this comment at the end of the file
  Local variables:
  sgml-omittag:t
  sgml-shorttag:t 
  sgml-namecase-general:nil
  sgml-minimize-attributes:nil
  sgml-always-quote-attributes:t
  sgml-indent-step:2
  sgml-indent-data:t
  sgml-parent-document:("../../../man_oof2.xml" "book" "chapter" "refentry" "refsect1")
  sgml-exposed-tags:nil
  sgml-local-ecat-files:nil
  End:
  -->
